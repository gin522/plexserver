<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SQLitePCL.pretty</name>
    </assembly>
    <members>
        <member name="T:SQLitePCL.pretty.BindParameter">
             <summary>
             Extension methods for instances of <see cref="T:SQLitePCL.pretty.IBindParameter" />.
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.BindParameter.Bind(SQLitePCL.pretty.IBindParameter,System.Boolean)">
             <summary>
             Bind the parameter to an <see cref="T:System.Boolean" />.
             </summary>
             <param name="This">The bind parameter.</param>
             <param name="value">A <see cref="T:System.Boolean" />.</param>
            </member>
        <member name="M:SQLitePCL.pretty.BindParameter.Bind(SQLitePCL.pretty.IBindParameter,System.TimeSpan)">
             <summary>
             Bind the parameter to an <see cref="T:System.TimeSpan" />.
             </summary>
             <param name="This">The bind parameter.</param>
             <param name="value">A <see cref="T:System.TimeSpan" />.</param>
            </member>
        <member name="M:SQLitePCL.pretty.BindParameter.Bind(SQLitePCL.pretty.IBindParameter,System.DateTime)">
             <summary>
             Bind the parameter to an <see cref="T:System.DateTime" />.
             </summary>
             <param name="This">The bind parameter.</param>
             <param name="value">A <see cref="T:System.DateTime" />.</param>
            </member>
        <member name="M:SQLitePCL.pretty.BindParameter.Bind(SQLitePCL.pretty.IBindParameter,System.DateTimeOffset)">
             <summary>
             Bind the parameter to an <see cref="T:System.DateTimeOffset" />.
             </summary>
             <param name="This">The bind parameter.</param>
             <param name="value">A <see cref="T:System.DateTimeOffset" />.</param>
            </member>
        <member name="M:SQLitePCL.pretty.BindParameter.Bind(SQLitePCL.pretty.IBindParameter,System.Decimal)">
             <summary>
             Bind the parameter to an <see cref="T:System.Decimal" />.
             </summary>
             <param name="This">The bind parameter.</param>
             <param name="value">A <see cref="T:System.Decimal" />.</param>
            </member>
        <member name="M:SQLitePCL.pretty.BindParameter.Bind(SQLitePCL.pretty.IBindParameter,System.Guid)">
             <summary>
             Bind the parameter to an <see cref="T:System.Guid" />.
             </summary>
             <param name="This">The bind parameter.</param>
             <param name="value">A <see cref="T:System.Guid" />.</param>
            </member>
        <member name="M:SQLitePCL.pretty.BindParameter.Bind(SQLitePCL.pretty.IBindParameter,System.IO.Stream)">
             <summary>
             Bind the parameter to an <see cref="T:System.IO.Stream" />.
             </summary>
             <param name="This">The bind parameter.</param>
             <param name="value">A <see cref="T:System.IO.Stream" />.</param>
            </member>
        <member name="M:SQLitePCL.pretty.BindParameter.Bind(SQLitePCL.pretty.IBindParameter,System.Uri)">
             <summary>
             Bind the parameter to a <see cref="T:System.Uri" />.
             </summary>
             <param name="This">The bind parameter.</param>
             <param name="value">A <see cref="T:System.IO.Stream" />.</param>
            </member>
        <member name="M:SQLitePCL.pretty.BindParameter.Bind(SQLitePCL.pretty.IBindParameter,System.Object)">
             <summary>
             Bind the parameter to a value based upon its runtime type.
             </summary>
             <param name="This">The bind parameter.</param>
             <param name="obj">
             An object that is either <see langword="null" /> or any numeric type, <see cref="T:System.String" />,
             byte[], <see cref="T:SQLitePCL.pretty.ISQLiteValue" /> or <see cref="T:System.IO.Stream" />.
             </param>
             <exception cref="T:System.ArgumentException">
             If the <see cref="T:System.Type" /> of the value is not supported
             -or-
             A non-readable stream is provided as a value.
             </exception>
            </member>
        <member name="M:SQLitePCL.pretty.BindParameter.Bind(SQLitePCL.pretty.IBindParameter,SQLitePCL.pretty.ISQLiteValue)">
             <summary>
             Bind the parameter to an <see cref="T:SQLitePCL.pretty.ISQLiteValue" />.
             </summary>
             <param name="This">The bind parameter.</param>
             <param name="value">A <see cref="T:SQLitePCL.pretty.ISQLiteValue" />.</param>
            </member>
        <member name="T:SQLitePCL.pretty.ColumnInfo">
             <summary>
             Represents information about a single column in <see cref="T:SQLitePCL.pretty.IStatement" /> result set.
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.ColumnInfo.op_Equality(SQLitePCL.pretty.ColumnInfo,SQLitePCL.pretty.ColumnInfo)">
             <summary>
             Indicates whether the two ColumnInfo instances are equal to each other.
             </summary>
             <param name="x">A ColumnInfo instance.</param>
             <param name="y">A ColumnInfo instance.</param>
             <returns><see langword="true" /> if the two instances are equal to each other; otherwise,  <see langword="false" />.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.ColumnInfo.op_Inequality(SQLitePCL.pretty.ColumnInfo,SQLitePCL.pretty.ColumnInfo)">
             <summary>
             Indicates whether the two ColumnInfo instances are not equal each other.
             </summary>
             <param name="x">A ColumnInfo instance.</param>
             <param name="y">A ColumnInfo instance.</param>
             <returns><see langword="true" /> if the two instances are not equal to each other; otherwise,  <see langword="false" />.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.ColumnInfo.op_GreaterThanOrEqual(SQLitePCL.pretty.ColumnInfo,SQLitePCL.pretty.ColumnInfo)">
             <summary>
             Indicates if the the first ColumnInfo is greater than or equal to the second.
             </summary>
             <param name="x">A ColumnInfo instance.</param>
             <param name="y">A ColumnInfo instance.</param>
             <returns><see langword="true" /> if the the first ColumnInfo is greater than or equal to the second; otherwise, <see langword="false" />.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.ColumnInfo.op_GreaterThan(SQLitePCL.pretty.ColumnInfo,SQLitePCL.pretty.ColumnInfo)">
             <summary>
             Indicates if the the first ColumnInfo is greater than the second.
             </summary>
             <param name="x">A ColumnInfo instance.</param>
             <param name="y">A ColumnInfo instance.</param>
             <returns><see langword="true" /> if the the first ColumnInfo is greater than the second; otherwise, <see langword="false" />.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.ColumnInfo.op_LessThanOrEqual(SQLitePCL.pretty.ColumnInfo,SQLitePCL.pretty.ColumnInfo)">
             <summary>
             Indicates if the the first ColumnInfo is less than or equal to the second.
             </summary>
             <param name="x">A ColumnInfo instance.</param>
             <param name="y">A ColumnInfo instance.</param>
             <returns><see langword="true" /> if the the first ColumnInfo is less than or equal to the second; otherwise, <see langword="false" />.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.ColumnInfo.op_LessThan(SQLitePCL.pretty.ColumnInfo,SQLitePCL.pretty.ColumnInfo)">
             <summary>
             Indicates if the the first ColumnInfo is less than the second.
             </summary>
             <param name="x">A ColumnInfo instance.</param>
             <param name="y">A ColumnInfo instance.</param>
             <returns><see langword="true" /> if the the first ColumnInfo is less than the second; otherwise, <see langword="false" />.</returns>
            </member>
        <member name="P:SQLitePCL.pretty.ColumnInfo.Name">
             <summary>
             The column name.
             </summary>
             <seealso href="https://sqlite.org/c3ref/column_name.html" />
            </member>
        <member name="P:SQLitePCL.pretty.ColumnInfo.DatabaseName">
             <summary>
             The database that is the origin of this particular result column.
             </summary>
             <seealso href="https://sqlite.org/c3ref/column_database_name.html" />
            </member>
        <member name="P:SQLitePCL.pretty.ColumnInfo.TableName">
             <summary>
              The table that is the origin of this particular result column.
             </summary>
             <seealso href="https://sqlite.org/c3ref/column_database_name.html" />
            </member>
        <member name="P:SQLitePCL.pretty.ColumnInfo.OriginName">
             <summary>
             The column that is the origin of this particular result column.
             </summary>
             <seealso href="https://sqlite.org/c3ref/column_database_name.html" />
            </member>
        <member name="P:SQLitePCL.pretty.ColumnInfo.DeclaredType">
             <summary>
             Returns the declared type of a column in a result set or null if no type is declared.
             </summary>
             <seealso href="https://sqlite.org/c3ref/column_decltype.html" />
            </member>
        <member name="M:SQLitePCL.pretty.ColumnInfo.Equals(SQLitePCL.pretty.ColumnInfo)">
             <inheritdoc />
            </member>
        <member name="M:SQLitePCL.pretty.ColumnInfo.Equals(System.Object)">
             <inheritdoc />
            </member>
        <member name="M:SQLitePCL.pretty.ColumnInfo.GetHashCode">
             <inheritdoc />
            </member>
        <member name="M:SQLitePCL.pretty.ColumnInfo.CompareTo(SQLitePCL.pretty.ColumnInfo)">
             <inheritdoc />
            </member>
        <member name="M:SQLitePCL.pretty.ColumnInfo.System#IComparable#CompareTo(System.Object)">
             <inheritdoc />&gt;
            </member>
        <member name="T:SQLitePCL.pretty.SQLiteException">
             <summary>
             Exception class that wraps the SQLite result codes.
             </summary>
             <seealso href="https://sqlite.org/rescode.html" />
            </member>
        <member name="P:SQLitePCL.pretty.SQLiteException.ErrorCode">
             <summary>
             Gets the SQLite error code associated with the exception.
             </summary>
            </member>
        <member name="P:SQLitePCL.pretty.SQLiteException.ExtendedErrorCode">
             <summary>
             Gets the SQLite extend error code associated with the exception.
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteException.ToString">
             <inheritdoc />
            </member>
        <member name="T:SQLitePCL.pretty.SQLiteVersion">
             <summary>
             The SQLite numeric version number.
             </summary>
             <seealso href="https://sqlite.org/c3ref/c_source_id.html" />
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteVersion.op_Equality(SQLitePCL.pretty.SQLiteVersion,SQLitePCL.pretty.SQLiteVersion)">
             <summary>
             Indicates whether the two SQLiteVersion instances are equal to each other.
             </summary>
             <param name="x">A SQLiteVersion instance.</param>
             <param name="y">A SQLiteVersion instance.</param>
             <returns><see langword="true" /> if the two instances are equal to each other; otherwise,  <see langword="false" />.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteVersion.op_Inequality(SQLitePCL.pretty.SQLiteVersion,SQLitePCL.pretty.SQLiteVersion)">
             <summary>
             Indicates whether the two SQLiteVersion instances are not equal each other.
             </summary>
             <param name="x">A SQLiteVersion instance.</param>
             <param name="y">A SQLiteVersion instance.</param>
             <returns><see langword="true" /> if the two instances are not equal to each other; otherwise,  <see langword="false" />.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteVersion.op_GreaterThanOrEqual(SQLitePCL.pretty.SQLiteVersion,SQLitePCL.pretty.SQLiteVersion)">
             <summary>
             Indicates if the the first SQLiteVersion is greater than or equal to the second.
             </summary>
             <param name="x">A SQLiteVersion instance.</param>
             <param name="y">A SQLiteVersion instance.</param>
             <returns><see langword="true" />if the the first SQLiteVersion is greater than or equal to the second; otherwise, <see langword="false" />.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteVersion.op_GreaterThan(SQLitePCL.pretty.SQLiteVersion,SQLitePCL.pretty.SQLiteVersion)">
             <summary>
             Indicates if the the first SQLiteVersion is greater than the second.
             </summary>
             <param name="x">A SQLiteVersion instance.</param>
             <param name="y">A SQLiteVersion instance.</param>
             <returns><see langword="true" />if the the first SQLiteVersion is greater than the second; otherwise, <see langword="false" />.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteVersion.op_LessThanOrEqual(SQLitePCL.pretty.SQLiteVersion,SQLitePCL.pretty.SQLiteVersion)">
             <summary>
             Indicates if the the first SQLiteVersion is less than or equal to the second.
             </summary>
             <param name="x">A SQLiteVersion instance.</param>
             <param name="y">A SQLiteVersion instance.</param>
             <returns><see langword="true" />if the the first SQLiteVersion is less than or equal to the second; otherwise, <see langword="false" />.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteVersion.op_LessThan(SQLitePCL.pretty.SQLiteVersion,SQLitePCL.pretty.SQLiteVersion)">
             <summary>
             Indicates if the the first SQLiteVersion is less than the second.
             </summary>
             <param name="x">A SQLiteVersion instance.</param>
             <param name="y">A SQLiteVersion instance.</param>
             <returns><see langword="true" />if the the first SQLiteVersion is less than the second; otherwise, <see langword="false" />.</returns>
            </member>
        <member name="P:SQLitePCL.pretty.SQLiteVersion.Major">
             <summary>
             Gets the major version number.
             </summary>
            </member>
        <member name="P:SQLitePCL.pretty.SQLiteVersion.Minor">
             <summary>
             Gets the minor version number.
             </summary>
            </member>
        <member name="P:SQLitePCL.pretty.SQLiteVersion.Release">
             <summary>
             Gets the release version number.
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteVersion.ToInt">
             <summary>
             Converts the version number as an integer with the value (Major*1000000 + Minor*1000 + Release).
             </summary>
             <returns>The version number as an integer</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteVersion.ToString">
             <inheritdoc />
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteVersion.GetHashCode">
             <inheritdoc />
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteVersion.Equals(SQLitePCL.pretty.SQLiteVersion)">
             <inheritdoc />
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteVersion.Equals(System.Object)">
             <inheritdoc />
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteVersion.CompareTo(SQLitePCL.pretty.SQLiteVersion)">
             <inheritdoc />
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteVersion.CompareTo(System.Object)">
             <inheritdoc />
            </member>
        <member name="T:SQLitePCL.pretty.SQLiteValue">
             <summary>
             Extensions methods for creating instances of <see cref="T:SQLitePCL.pretty.ISQLiteValue" />.
             </summary>
            </member>
        <member name="P:SQLitePCL.pretty.SQLiteValue.Null">
             <summary>
             The SQLite null value.
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ZeroBlob(System.Int32)">
             <summary>
             Create a SQLite zeroblob of the specified length.
             </summary>
             <remarks>This method does not allocate any memory,
             therefore the zero blobs can safely be of arbitrary length.</remarks>
             <param name="length">The length of the zero blob</param>
             <returns>An ISQLiteValue representing the zero blob.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToSQLiteValue(System.Int32)">
             <summary>
             Converts an <see cref="T:System.Int32" /> to an <see cref="T:SQLitePCL.pretty.ISQLiteValue" />.
             </summary>
             <param name="This">The value to convert</param>
             <returns>A ISQLiteValue representing the value.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToSQLiteValue(System.Int16)">
             <summary>
             Converts an <see cref="T:System.Int16" /> to an <see cref="T:SQLitePCL.pretty.ISQLiteValue" />.
             </summary>
             <param name="This">The value to convert</param>
             <returns>A ISQLiteValue representing the value.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToSQLiteValue(System.Boolean)">
             <summary>
             Converts a <see cref="T:System.Boolean" /> to an <see cref="T:SQLitePCL.pretty.ISQLiteValue" />.
             </summary>
             <param name="This">The value to convert</param>
             <returns>A ISQLiteValue representing the value.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToSQLiteValue(System.Byte)">
             <summary>
             Converts a <see cref="T:System.Byte" /> to an <see cref="T:SQLitePCL.pretty.ISQLiteValue" />.
             </summary>
             <param name="This">The value to convert</param>
             <returns>A ISQLiteValue representing the value.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToSQLiteValue(System.Char)">
             <summary>
             Converts a <see cref="T:System.Char" /> to an <see cref="T:SQLitePCL.pretty.ISQLiteValue" />.
             </summary>
             <param name="This">The value to convert</param>
             <returns>A ISQLiteValue representing the value.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToSQLiteValue(System.SByte)">
             <summary>
             Converts a <see cref="T:System.SByte" /> to an <see cref="T:SQLitePCL.pretty.ISQLiteValue" />.
             </summary>
             <param name="This">The value to convert</param>
             <returns>A ISQLiteValue representing the value.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToSQLiteValue(System.UInt32)">
             <summary>
             Converts a <see cref="T:System.UInt32" /> to an <see cref="T:SQLitePCL.pretty.ISQLiteValue" />.
             </summary>
             <param name="This">The value to convert</param>
             <returns>A ISQLiteValue representing the value.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToSQLiteValue(System.UInt16)">
             <summary>
             Converts an <see cref="T:System.UInt16" /> to an <see cref="T:SQLitePCL.pretty.ISQLiteValue" />.
             </summary>
             <param name="This">The value to convert</param>
             <returns>A ISQLiteValue representing the value.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToSQLiteValue(System.Int64)">
             <summary>
             Converts a <see cref="T:System.Int64" /> to an <see cref="T:SQLitePCL.pretty.ISQLiteValue" />.
             </summary>
             <param name="This">The value to convert</param>
             <returns>A ISQLiteValue representing the value.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToSQLiteValue(System.Double)">
             <summary>
             Converts a <see cref="T:System.Double" /> to an <see cref="T:SQLitePCL.pretty.ISQLiteValue" />.
             </summary>
             <param name="This">The value to convert</param>
             <returns>A ISQLiteValue representing the value.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToSQLiteValue(System.Single)">
             <summary>
             Converts an <see cref="T:System.Single" /> to an <see cref="T:SQLitePCL.pretty.ISQLiteValue" />.
             </summary>
             <param name="This">The value to convert</param>
             <returns>A ISQLiteValue representing the value.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToSQLiteValue(System.String)">
             <summary>
             Converts a <see cref="T:System.String" /> to an <see cref="T:SQLitePCL.pretty.ISQLiteValue" />.
             </summary>
             <param name="This">The value to convert</param>
             <returns>A ISQLiteValue representing the value.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToSQLiteValue(System.Byte[])">
             <summary>
             Converts a byte array to an <see cref="T:SQLitePCL.pretty.ISQLiteValue" />.
             </summary>
             <param name="This">The value to convert</param>
             <returns>A ISQLiteValue representing the blob.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToSQLiteValue(System.TimeSpan)">
             <summary>
             Converts an <see cref="T:System.TimeSpan" /> to an <see cref="T:SQLitePCL.pretty.ISQLiteValue" />.
             </summary>
             <param name="This">The value to convert</param>
             <returns>A ISQLiteValue representing the value.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToSQLiteValue(System.DateTime)">
             <summary>
             Converts an <see cref="T:System.DateTime" /> to an <see cref="T:SQLitePCL.pretty.ISQLiteValue" />.
             </summary>
             <param name="This">The value to convert</param>
             <returns>A ISQLiteValue representing the value.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToSQLiteValue(System.DateTimeOffset)">
             <summary>
             Converts an <see cref="T:System.DateTimeOffset" /> to an <see cref="T:SQLitePCL.pretty.ISQLiteValue" />.
             </summary>
             <param name="This">The value to convert</param>
             <returns>A ISQLiteValue representing the value.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToSQLiteValue(System.Decimal)">
             <summary>
             Converts an <see cref="T:System.Decimal" /> to an <see cref="T:SQLitePCL.pretty.ISQLiteValue" />.
             </summary>
             <param name="This">The value to convert</param>
             <returns>A ISQLiteValue representing the value.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToSQLiteValue(System.Guid)">
             <summary>
             Converts an <see cref="T:System.Guid" /> to an <see cref="T:SQLitePCL.pretty.ISQLiteValue" />.
             </summary>
             <param name="This">The value to convert</param>
             <returns>A ISQLiteValue representing the value.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToSQLiteValue(System.Uri)">
             <summary>
             Converts an <see cref="T:System.Uri" /> to an <see cref="T:SQLitePCL.pretty.ISQLiteValue" />.
             </summary>
             <param name="This">The value to convert</param>
             <returns>A ISQLiteValue representing the value.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToBool(SQLitePCL.pretty.ISQLiteValue)">
             <summary>
             Returns the SQLiteValue as a <see cref="T:System.Boolean" />. 
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToFloat(SQLitePCL.pretty.ISQLiteValue)">
             <summary>
             Returns the SQLiteValue as a <see cref="T:System.Single" />. 
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToTimeSpan(SQLitePCL.pretty.ISQLiteValue)">
             <summary>
             Returns the SQLiteValue as a <see cref="T:System.TimeSpan" />. 
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToDateTime(SQLitePCL.pretty.ISQLiteValue)">
             <summary>
             Returns the SQLiteValue as a <see cref="T:System.DateTime" />. 
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToDateTimeOffset(SQLitePCL.pretty.ISQLiteValue)">
             <summary>
             Returns the SQLiteValue as a <see cref="T:System.DateTimeOffset" />. 
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToUInt32(SQLitePCL.pretty.ISQLiteValue)">
             <summary>
             Returns the SQLiteValue as a <see cref="T:System.UInt32" />. 
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToDecimal(SQLitePCL.pretty.ISQLiteValue)">
             <summary>
             Returns the SQLiteValue as a <see cref="T:System.Decimal" />. 
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToByte(SQLitePCL.pretty.ISQLiteValue)">
             <summary>
             Returns the SQLiteValue as a <see cref="T:System.Byte" />. 
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToUInt16(SQLitePCL.pretty.ISQLiteValue)">
             <summary>
             Returns the SQLiteValue as a <see cref="T:System.UInt16" />. 
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToShort(SQLitePCL.pretty.ISQLiteValue)">
             <summary>
             Returns the SQLiteValue as a <see cref="T:System.Int16" />. 
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToSByte(SQLitePCL.pretty.ISQLiteValue)">
             <summary>
             Returns the SQLiteValue as a <see cref="T:System.SByte" />. 
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToGuid(SQLitePCL.pretty.ISQLiteValue)">
             <summary>
             Returns the SQLiteValue as a <see cref="T:System.Guid" />. 
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteValue.ToUri(SQLitePCL.pretty.ISQLiteValue)">
             <summary>
             Returns the SQLiteValue as a <see cref="T:System.Uri" />. 
             </summary>
            </member>
        <member name="T:SQLitePCL.pretty.IDatabaseConnection">
             <summary>
             A connection to a SQLite database.
             </summary>
             <seealso href="https://sqlite.org/c3ref/sqlite3.html" />
            </member>
        <member name="P:SQLitePCL.pretty.IDatabaseConnection.IsAutoCommit">
             <summary>
             Returns true if the given database connection is in autocommit mode,
             </summary>
             <seealso href="https://sqlite.org/c3ref/get_autocommit.html" />
            </member>
        <member name="P:SQLitePCL.pretty.IDatabaseConnection.IsReadOnly">
             <summary>
             Returns true if the database connection is readonly.
             </summary>
            </member>
        <member name="P:SQLitePCL.pretty.IDatabaseConnection.Changes">
             <summary>
             Returns the number of database rows that were changed, inserted
             or deleted by the most recently completed <see cref="T:SQLitePCL.pretty.IStatement" />.
             </summary>
             <seealso href="https://sqlite.org/c3ref/changes.html" />
            </member>
        <member name="P:SQLitePCL.pretty.IDatabaseConnection.TotalChanges">
             <summary>
             Returns the number of row changes caused by INSERT,
             UPDATE or DELETE statements since the database connection was opened.
             </summary>
             <seealso href="https://www.sqlite.org/c3ref/total_changes.html" />
            </member>
        <member name="P:SQLitePCL.pretty.IDatabaseConnection.LastInsertedRowId">
             <summary>
             Returns the rowid of the most recent successful INSERT into a rowid or virtual table.
             </summary>
             <seealso href="https://sqlite.org/c3ref/last_insert_rowid.html" />
            </member>
        <member name="M:SQLitePCL.pretty.IDatabaseConnection.GetTableColumnMetadata(System.String,System.String,System.String)">
             <summary>
             Returns metadata about a specific column of a specific database table,
             </summary>
             <param name="dbName">
                 The database name.  If null, then all attached databases are searched 
                 for the table using the same algorithm used by the database engine to 
                 resolve unqualified table references.
             </param>
             <param name="tableName">The table name.</param>
             <param name="columnName">The column name.</param>
             <returns>The column metadata.</returns>
             <seealso href="https://www.sqlite.org/c3ref/table_column_metadata.html" />
            </member>
        <member name="M:SQLitePCL.pretty.IDatabaseConnection.IsDatabaseReadOnly(System.String)">
             <summary>
             Determine whether a database is readonly.
             </summary>
             <seealso href="https://www.sqlite.org/c3ref/db_readonly.html" />
             <param name="dbName">The database name.</param>
             <returns><see langword="true" /> if the database is readonly, otherwise <see langword="false" />.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.IDatabaseConnection.WalCheckPoint(System.String,SQLitePCL.pretty.WalCheckPointMode,System.Int32@,System.Int32@)">
             <summary>
             Run a checkpoint operation on a WAL database on the connection. The specific operation
             is determined by the value of the <paramref name="mode" /> parameter.
             </summary>
             <param name="dbName">The database name.</param>
             <param name="mode">The checkpoint mode to use.</param>
             <param name="nLog">Returns the total number of frames in the log file before returning.</param>
             <param name="nCkpt">Return the total number of checkpointed frames.</param>
            </member>
        <member name="M:SQLitePCL.pretty.IDatabaseConnection.OpenBlob(System.String,System.String,System.String,System.Int64,System.Boolean)">
             <summary>
             Opens the blob located by the a database, table, column, and rowid for incremental I/O as a <see cref="T:System.IO.Stream" />.
             </summary>
             <seealso href="https://sqlite.org/c3ref/blob_open.html" />
             <param name="database">The database containing the blob.</param>
             <param name="tableName">The table containing the blob.</param>
             <param name="columnName">The column containing the blob.</param>
             <param name="rowId">The row containing the blob.</param>
             <param name="canWrite">
                 <see langwords="true" /> if the Stream should be open for both read and write operations.
                 <see langwords="false" /> if the Stream should be open oly for read operations.
             </param>
             <returns>A <see cref="T:System.IO.Stream" /> that can be used to synchronously write and read to and from blob.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.IDatabaseConnection.PrepareStatement(System.String,System.String@)">
             <summary>
             Compiles a SQL statement into an <see cref="T:SQLitePCL.pretty.IStatement" />.
             </summary>
             <seealso href="https://sqlite.org/c3ref/prepare.html" />
             <param name="sql">The statement to compiled.</param>
             <param name="tail">Additional text beyond past the end of the first SQL statement.</param>
             <returns>The compiled <see cref="T:SQLitePCL.pretty.IStatement" /></returns>
            </member>
        <member name="M:SQLitePCL.pretty.IDatabaseConnection.Status(SQLitePCL.pretty.DatabaseConnectionStatusCode,System.Int32@,System.Int32@,System.Boolean)">
             <summary>
             Retrieve runtime status information about a single database connection.
             </summary>
             <seealso href="https://www.sqlite.org/c3ref/db_status.html" />
             <param name="statusCode">The parameter to interrogate.</param>
             <param name="current">The current value of the performance metric.</param>
             <param name="highwater">The highwater value of the performance metric.</param>
             <param name="reset">If <see langword="true" />, then the highest instantaneous value is reset back down to the current value.</param>
            </member>
        <member name="T:SQLitePCL.pretty.IStatement">
             <summary>
             Represents a single SQL statement.
             </summary>
             <seealso href="https://sqlite.org/c3ref/stmt.html" />
            </member>
        <member name="P:SQLitePCL.pretty.IStatement.BindParameters">
             <summary>
             An <see cref="T:SQLitePCL.pretty.IReadOnlyOrderedDictionary`2" /> of the statement's bind parameters
             keyed by the parameter name. Note when accessing by index the first parameter
             is zero-based indexed unlike in the native SQLite APIs that are one-based indexed.
             </summary>
            </member>
        <member name="P:SQLitePCL.pretty.IStatement.Columns">
             <summary>
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> of the columns in the statement's resultset.
             </summary>
            </member>
        <member name="P:SQLitePCL.pretty.IStatement.SQL">
             <summary>
             The text string used to prepare the statement.
             </summary>
             <seealso href="https://sqlite.org/c3ref/sql.html" />
            </member>
        <member name="P:SQLitePCL.pretty.IStatement.IsReadOnly">
             <summary>
             <see langword="true" /> if the statement is readonly, otherwise <see langword="false" />.
             </summary>
             <seealso href="https://sqlite.org/c3ref/stmt_readonly.html" />
            </member>
        <member name="P:SQLitePCL.pretty.IStatement.IsBusy">
             <summary>
             <see langwords="true" /> if the statement is busy, otherwise <see langwords="false" />.
             </summary>
             <seealso href="https://sqlite.org/c3ref/stmt_busy.html" />
            </member>
        <member name="M:SQLitePCL.pretty.IStatement.ClearBindings">
             <summary>
             Resets this statements bindings to <see cref="P:SQLitePCL.pretty.SQLiteValue.Null" />.
             </summary>
             <seealso href="https://sqlite.org/c3ref/clear_bindings.html" />
            </member>
        <member name="M:SQLitePCL.pretty.IStatement.Status(SQLitePCL.pretty.StatementStatusCode,System.Boolean)">
             <summary>
             Retrieve and reset counter values from a prepared statement.
             </summary>
             <seealso href="https://www.sqlite.org/c3ref/stmt_status.html" />
             <param name="statusCode">The SQLITE_STMTSTATUS counter to be interrogated.</param>
             <param name="reset">If <see langword="true" />, then the counter is reset to zero after this interface call returns.</param>
             <returns>The current value of the requested counter.</returns>
            </member>
        <member name="T:SQLitePCL.pretty.IReadOnlyOrderedDictionary`2">
             <summary>
             Represents an indexed collection of key/value pairs.
             </summary>
             <typeparam name="TKey">The type of keys in the read-only dictionary.</typeparam>
             <typeparam name="TValue">The type of values in the read-only dictionary.</typeparam>
            </member>
        <member name="P:SQLitePCL.pretty.IReadOnlyOrderedDictionary`2.Item(System.Int32)">
             <summary>
             Gets the element at the specified index.
             </summary>
             <param name="index">The zero-based index of the element to get.</param>
             <returns>The element at the specified index.</returns>
             <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="index" /> is less than 0
             -or-
             <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.Generic.IReadOnlyCollection`1.Count" />.
             </exception>
            </member>
        <member name="T:SQLitePCL.pretty.IBindParameter">
             <summary>
             An indexed bind parameter in a <see cref="T:SQLitePCL.pretty.IStatement" />.
             </summary>
            </member>
        <member name="P:SQLitePCL.pretty.IBindParameter.Name">
             <summary>
             The bind paramter name.
             </summary>
             <seealso href="https://sqlite.org/c3ref/bind_parameter_name.html" />
            </member>
        <member name="M:SQLitePCL.pretty.IBindParameter.Bind(System.Byte[])">
             <summary>
             Binds the parameter to a byte array.
             </summary>
             <seealso href="https://sqlite.org/c3ref/bind_blob.html" />
             <param name="blob">The byte array to bind.</param>
            </member>
        <member name="M:SQLitePCL.pretty.IBindParameter.Bind(System.Double)">
             <summary>
             Binds the parameter to a double.
             </summary>
             <seealso href="https://sqlite.org/c3ref/bind_blob.html" />
             <param name="val">The double to bind.</param>
            </member>
        <member name="M:SQLitePCL.pretty.IBindParameter.Bind(System.Int32)">
             <summary>
             Binds the parameter to an int.
             </summary>
             <seealso href="https://sqlite.org/c3ref/bind_blob.html" />
             <param name="val">The int to bind.</param>
            </member>
        <member name="M:SQLitePCL.pretty.IBindParameter.Bind(System.Int64)">
             <summary>
             Binds the parameter to a long.
             </summary>
             <seealso href="https://sqlite.org/c3ref/bind_blob.html" />
             <param name="val">The long to bind.</param>
            </member>
        <member name="M:SQLitePCL.pretty.IBindParameter.Bind(System.String)">
             <summary>
             Binds the parameter to a string.
             </summary>
             <seealso href="https://sqlite.org/c3ref/bind_blob.html" />
             <param name="text">The text to bind.</param>
            </member>
        <member name="M:SQLitePCL.pretty.IBindParameter.BindNull">
             <summary>
             Binds the parameter to null.
             </summary>
             <seealso href="https://sqlite.org/c3ref/bind_blob.html" />
            </member>
        <member name="M:SQLitePCL.pretty.IBindParameter.BindZeroBlob(System.Int32)">
             <summary>
             Binds the parameter to a blob of length N that is filled with zeroes.
             Zeroblobs are intended to serve as placeholders for BLOBs whose
             content is later written using <see cref="M:SQLitePCL.pretty.IDatabaseConnection.OpenBlob(System.String,System.String,System.String,System.Int64,System.Boolean)" />.
             </summary>
             <seealso href="https://sqlite.org/c3ref/bind_blob.html" />
             <param name="size">The length of the blob in bytes.</param>
            </member>
        <member name="T:SQLitePCL.pretty.ISQLiteValue">
             <summary>
             SQLite dynamically type value.
             </summary>
             <seealso href="https://sqlite.org/c3ref/value.html" />
            </member>
        <member name="P:SQLitePCL.pretty.ISQLiteValue.SQLiteType">
             <summary>
             The underlying <see cref="T:SQLitePCL.pretty.SQLiteType" />  of the value.
             </summary>
            </member>
        <member name="P:SQLitePCL.pretty.ISQLiteValue.Length">
             <summary>
             The length of the value subject to SQLite value casting rules.
             </summary>
             <seealso href="https://sqlite.org/c3ref/column_blob.html" />
            </member>
        <member name="M:SQLitePCL.pretty.ISQLiteValue.ToBlob">
             <summary>
             Returns the SQLiteValue as a byte array. Casting if necessary.
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.ISQLiteValue.ToDouble">
             <summary>
             Returns the SQLiteValue as a double. Casting if necessary.
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.ISQLiteValue.ToInt">
             <summary>
             Returns the SQLiteValue as an int. Casting if necessary.
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.ISQLiteValue.ToInt64">
             <summary>
             Returns the SQLiteValue as a long. Casting if necessary.
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.ISQLiteValue.ToString">
             <summary>
             Returns the SQLiteValue as a string. Casting if necessary.
             </summary>
            </member>
        <member name="T:SQLitePCL.pretty.IResultSetValue">
             <summary>
             An <see cref="T:SQLitePCL.pretty.ISQLiteValue" /> that includes <see cref="T:SQLitePCL.pretty.ColumnInfo" /> about the value.
             </summary>
            </member>
        <member name="P:SQLitePCL.pretty.IResultSetValue.ColumnInfo">
             <summary>
             The value's column info.
             </summary>
            </member>
        <member name="T:SQLitePCL.pretty.IDatabaseBackup">
             <summary>
             Interface to the SQLite backup api.
             </summary>
             <seealso href="https://sqlite.org/c3ref/backup.html" />
            </member>
        <member name="P:SQLitePCL.pretty.IDatabaseBackup.PageCount">
             <summary>
             The total number of pages in the source database file.
             </summary>
             <seealso href="https://sqlite.org/c3ref/backup_finish.html#sqlite3backuppagecount" />
            </member>
        <member name="P:SQLitePCL.pretty.IDatabaseBackup.RemainingPages">
             <summary>
             The number of pages still to be backed up.
             </summary>
             <seealso href="https://sqlite.org/c3ref/backup_finish.html#sqlite3backupremaining" />
            </member>
        <member name="M:SQLitePCL.pretty.IDatabaseBackup.Step(System.Int32)">
             <summary>
             Copies up to nPage  between the source and destination databases.
             If nPages is negative, all remaining source pages are copied.
             </summary>
             <seealso href="https://sqlite.org/c3ref/backup_finish.html#sqlite3backupstep" />
             <param name="nPages"></param>
             <returns></returns>
            </member>
        <member name="T:SQLitePCL.pretty.SQLiteType">
             <summary>
             SQLite fundamental datatypes.
             </summary>
             <seealso href="https://sqlite.org/c3ref/c_blob.html" />
            </member>
        <member name="F:SQLitePCL.pretty.SQLiteType.Integer">
             <summary>
             64-bit signed integer
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.SQLiteType.Float">
             <summary>
             64-bit IEEE floating point number
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.SQLiteType.Text">
             <summary>
             String
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.SQLiteType.Blob">
             <summary>
             Blob
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.SQLiteType.Null">
             <summary>
             Null
             </summary>
            </member>
        <member name="T:SQLitePCL.pretty.ConnectionFlags">
             <summary>
             Flags For File Open Operations
             </summary>
             <seealso href="https://sqlite.org/c3ref/c_open_autoproxy.html" />
            </member>
        <member name="F:SQLitePCL.pretty.ConnectionFlags.ReadOnly">
             <summary>
             Opens the database as readonly.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ConnectionFlags.ReadWrite">
             <summary>
             Open the database is for reading and writing if possible.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ConnectionFlags.Create">
             <summary>
             Creates the database if it does not already exist.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ConnectionFlags.Uri">
             <summary>
             Enables URI filename interpretation.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ConnectionFlags.Memory">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ConnectionFlags.NoMutex">
             <summary>
             Opens the database connection in the multi-thread threading mode as
             long as the single-thread mode has not been set at compile-time or start-time.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ConnectionFlags.FullMutex">
             <summary>
             Opens the database connection in the serialized threading mode unless
             single-thread was previously selected at compile-time or start-time.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ConnectionFlags.SharedCached">
             <summary>
             Causes the database connection to be eligible to use shared cache mode,
             regardless of whether or not shared cache is enabled.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ConnectionFlags.PrivateCache">
             <summary>
             Causes the database connection to not participate in shared cache mode even if it is enabled.
             </summary>
            </member>
        <member name="T:SQLitePCL.pretty.ActionCode">
             <summary>
             SQLite Action Codes
             </summary>
             <seealso href="https://sqlite.org/c3ref/c_alter_table.html" />
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.CreateIndex">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.CreateTable">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.CreateTempIndex">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.CreateTempTable">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.CreateTempTrigger">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.CreateTempView">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.CreateTrigger">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.CreateView">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.Delete">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.DropIndex">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.DropTable">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.DropTempIndex">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.DropTempTable">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.DropTempTrigger">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.DropTempView">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.DropTrigger">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.DropView">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.Insert">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.Pragma">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.Read">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.Select">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.Transaction">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.Update">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.Attach">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.Detach">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.AlterTable">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.ReIndex">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.Analyze">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.CreateVTable">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.DropVTable">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.Function">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.SavePoint">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.Copy">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ActionCode.Recursive">
             <summary>
            
             </summary>
            </member>
        <member name="T:SQLitePCL.pretty.ErrorCode">
             <summary>
             SQLite Result and Error Codes
             </summary>
             <seealso href="https://sqlite.org/rescode.html" />
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.Ok">
             <summary>
             The operation was successful and that there were no errors. Most other result codes indicate an error.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.Error">
             <summary>
             Generic error code that is used when no other more specific error code is available.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.Internal">
             <summary>
             Indicates an internal malfunction.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.Perm">
             <summary>
             Indicates that the requested access mode for a newly created database could not be provided.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.Abort">
             <summary>
             Indicates that an operation was aborted prior to completion, usually be application request.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.Busy">
             <summary>
             Indicates that the database file could not be written (or in some cases read) because of
             concurrent activity by some other database connection, usually a database connection in a separate process.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.Locked">
             <summary>
             Indicates that a write operation could not continue because of a conflict within the
             same database connection or a conflict with a different database connection that uses a shared cache.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.NoMemory">
             <summary>
             Indicates that SQLite was unable to allocate all the memory it needed to complete the operation.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.ReadOnly">
             <summary>
             An attempt was made to alter some data for which the current database connection does not have write permission.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.Interrupt">
             <summary>
             Indicates that an operation was interrupted.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOError">
             <summary>
             The operation could not finish because the operating system reported an I/O error.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.Corrupt">
             <summary>
             Indicates that the database file has been corrupted.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.NotFound">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.Full">
             <summary>
             Indicates that a write could not complete because the disk is full.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.CannotOpen">
             <summary>
             Indicates that SQLite was unable to open a file.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.Protocol">
             <summary>
             Indicates a problem with the file locking protocol used by SQLite.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.Empty">
             <summary>
             Result code is not currently used.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.Schema">
             <summary>
             Indicates that the database schema has changed.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.TooBig">
             <summary>
             Indicates that a string or BLOB was too large.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.Constraint">
             <summary>
             Indicates that an SQL constraint violation occurred while trying to process an SQL statement.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.Mismatch">
             <summary>
             Indicates a datatype mismatch.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.Misuse">
             <summary>
             Returned if the application uses any SQLite interface in a way that is undefined or unsupported.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.NoLFS">
             <summary>
             Returned on systems that do not support large files when the database grows to be
             larger than what the filesystem can handle.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.NotAuthorized">
             <summary>
             Returned when the authorizer callback indicates that an SQL statement being prepared is not authorized.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.Format">
             <summary>
             Error code is not currently used by SQLite.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.Range">
             <summary>
             Indicates that the parameter number argument to one of the sqlite3_bind routines is out of range.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.NotDatabase">
             <summary>
             Indicates that the file being opened does not appear to be an SQLite database file.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.Notice">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.Warning">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.Row">
             <summary>
             Indicates that another row of output is available.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.Done">
             <summary>
             Indicates that an operation has completed.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorRead">
             <summary>
             Indicates an I/O error in the VFS layer while trying to read from a file on disk.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorShortRead">
             <summary>
             Indicates that a read attempt in the VFS layer was unable to obtain as many bytes as was requested.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorWrite">
             <summary>
             Indicates an I/O error in the VFS layer while trying to write into a file on disk.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorFSync">
             <summary>
             Indicates an I/O error in the VFS layer while trying to flush previously
             written content out of OS and/or disk-control buffers and into persistent storage.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorDirFSync">
             <summary>
             Indicates an I/O error in the VFS layer while trying to invoke fsync() on a directory.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorTruncate">
             <summary>
             Indicates an I/O error in the VFS layer while trying to truncate a file to a smaller size.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorFStat">
             <summary>
             Indicates an I/O error in the VFS layer while trying to invoke fstat()
             (or the equivalent) on a file in order to determine information
             such as the file size or access permissions.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorUnlock">
             <summary>
             Indicates an I/O error within xUnlock method on the sqlite3_io_methods object.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorReadLock">
             <summary>
             Indicates an I/O error within xLock method on the sqlite3_io_methods object while trying to obtain a read lock.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorDelete">
             <summary>
             Indicates an I/O error within xDelete method on the sqlite3_vfs object.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorBlocked">
             <summary>
             Error code is no longer used.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorNoMemory">
             <summary>
             Indicates that an operation could not be completed due to the inability to allocate sufficient memory.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorAccess">
             <summary>
             iIndicates an I/O error within the xAccess method on the sqlite3_vfs object.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorCheckReservedLock">
             <summary>
             Indicates an I/O error within the xCheckReservedLock method on the sqlite3_io_methods object.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorLock">
             <summary>
             Indicates an I/O error in the advisory file locking logic.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorClose">
             <summary>
             Indicates an I/O error within the xClose method on the sqlite3_io_methods object.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorDirClose">
             <summary>
             Error code is no longer used.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorShmOpen">
             <summary>
             Indicates an I/O error within the xShmMap method on the sqlite3_io_methods
             object while trying to open a new shared memory segment.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorShmSize">
             <summary>
             Indicates an I/O error within the xShmMap method on the sqlite3_io_methods
             object while trying to resize an existing shared memory segment.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorShmLock">
             <summary>
             Error code is no longer used.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorShmMap">
             <summary>
             Indicating an I/O error within the xShmMap method on the sqlite3_io_methods object while trying to map a shared memory segment into the process address space.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorSeek">
             <summary>
             Indicates an I/O error within the xRead or xWrite methods on the sqlite3_io_methods
             object while trying to seek a file descriptor to the beginning point of the file
             where the read or write is to occur.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorDeleteNoEnt">
             <summary>
             Indicates that the xDelete method on the sqlite3_vfs object
             failed because the file being deleted does not exist.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorMMap">
             <summary>
             Indicates an I/O error within the xFetch or xUnfetch methods on the
             sqlite3_io_methods object while trying to map or unmap part of the
             database file into the process address space.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorGetTempPath">
             <summary>
             Indicates that the VFS is unable to determine a suitable
             directory in which to place temporary files.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.IOErrorConvPath">
             <summary>
             Used only by Cygwin VFS to indicate that the cygwin_conv_path()
             system call failed.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.LockSharedCache">
             <summary>
             Indicates that a locking conflict has occurred due to contention with a different
             database connection that happens to hold a shared cache with the database connection
             to which the error was returned.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.BusyRecovery">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.BusySnapShot">
             <summary>
             Occurs on WAL mode databases when a database connection tries to promote a read
             transaction into a write transaction but finds that another database connection has
             already written to the database and thus invalidated prior reads.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.CannotOpenNoTempDirectory">
             <summary>
             Error code is no longer used.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.CannotOpenIsDirectory">
             <summary>
             Indicates that a file open operation failed because the file is really a directory.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.CannotOpenFullPath">
             <summary>
             Indicates that a file open operation failed because the operating
             system was unable to convert the filename into a full pathname.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.CannotOpenConvPath">
             <summary>
             Used only by Cygwin VFS and indicating that the cygwin_conv_path()
             system call failed while trying to open a file.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.CorruptVTab">
             <summary>
             Indicates that content in the virtual table is corrupt.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.ReadonlyRecovery">
             <summary>
             Indicates that a WAL mode database cannot be opened because the database
             file needs to be recovered and recovery requires write access but only
             read access is available.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.ReadonlyCannotLock">
             <summary>
             Indicates that SQLite is unable to obtain a read lock on a WAL mode
             database because the shared-memory file associated with that database is read-only.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.ReadonlyRollback">
             <summary>
             Indicates that a database cannot be opened because it has a hot journal
             that needs to be rolled back but cannot because the database is readonly.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.ReadonlyDatabaseMoved">
             <summary>
             Indicates that a database cannot be modified because the database file
             has been moved since it was opened, and so any attempt to modify the database
             might result in database corruption if the processes crashes because the
             rollback journal would not be correctly named.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.AbortRollback">
             <summary>
             Indicates that an SQL statement aborted because the transaction that
             was active when the SQL statement first started was rolled back.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.ConstraintCheck">
             <summary>
             Indicates that a CHECK constraint failed
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.ConstraintCommitHook">
             <summary>
             Indicates that a commit hook callback returned true, thus
             causing the SQL statement to be rolled back.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.ConstraintForeignKey">
             <summary>
             Indicates that a foreign key constraint failed.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.ConstraintFunction">
             <summary>
             Not currently used by the SQLite core.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.ConstraintNotNull">
             <summary>
             Indicates that a NOT NULL constraint failed.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.ConstraintPrimaryKey">
             <summary>
             Indicates that a PRIMARY KEY constraint failed.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.ConstraintTrigger">
             <summary>
             Indicates that a RAISE function within a trigger fired, causing the SQL statement to abort
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.ConstraintUnique">
             <summary>
             Indicates that a UNIQUE constraint failed.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.ConstraintVTab">
             <summary>
             Not currently used by the SQLite core.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.ConstraintRowId">
             <summary>
             Indicates that a rowid is not unique.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.NoticeRecoverWal">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.NoticeRecoverRollback">
             <summary>
            
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.ErrorCode.WarningAutoIndex">
             <summary>
            
             </summary>
            </member>
        <member name="T:SQLitePCL.pretty.WalCheckPointMode">
             <summary>
             WAL checkpoint modes.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.WalCheckPointMode.Passive">
             <summary>
             Checkpoint as many frames as possible without waiting for any database
             readers or writers to finish. Sync the db file if all frames in the
             log are checkpointed.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.WalCheckPointMode.Full">
             <summary>
             This mode blocks until there is no database writer and all readers are
             reading from the most recent database snapshot. It then checkpoints all
             frames in the log file and syncs the database file. This call blocks database
             writers while it is running, but not database readers.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.WalCheckPointMode.Restart">
             <summary>
             This mode works the same way as <see cref="F:SQLitePCL.pretty.WalCheckPointMode.Full" />, except after checkpointing
             the log file it blocks until all readers are reading from the database file
             only. This ensures that the next client to write to the database file restarts
             the log file from the beginning. This call blocks database writers while it
             is running, but not database readers.
             </summary>
            </member>
        <member name="T:SQLitePCL.pretty.SQLiteStatusCode">
             <summary>
             These constants designate various run-time status parameters that can be 
             returned by <see cref="M:SQLitePCL.pretty.SQLite3.Status(SQLitePCL.pretty.SQLiteStatusCode,System.Int32@,System.Int32@,System.Boolean)" />.
             </summary>
             <seealso href="https://www.sqlite.org/c3ref/c_status_malloc_count.html" />
            </member>
        <member name="F:SQLitePCL.pretty.SQLiteStatusCode.MemoryUsed">
             <summary>
             This parameter is the current amount of memory checked out using sqlite3_malloc(), 
             either directly or indirectly. The figure includes calls made to sqlite3_malloc() 
             by the application and internal memory usage by the SQLite library. Scratch 
             memory controlled by SQLITE_CONFIG_SCRATCH and auxiliary page-cache memory 
             controlled by SQLITE_CONFIG_PAGECACHE is not included in this parameter. 
             The amount returned is the sum of the allocation sizes as reported by the xSize 
             method in sqlite3_mem_methods.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.SQLiteStatusCode.PageCacheUsed">
             <summary>
             This parameter returns the number of pages used out of the pagecache memory allocator
             that was configured using SQLITE_CONFIG_PAGECACHE. The value returned is in pages, 
             not in bytes.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.SQLiteStatusCode.PageCacheOverflow">
             <summary>
             This parameter returns the number of bytes of page cache allocation which could 
             not be satisfied by the SQLITE_CONFIG_PAGECACHE buffer and where forced to overflow 
             to sqlite3_malloc(). The returned value includes allocations that overflowed 
             because they where too large (they were larger than the "sz" parameter to 
             SQLITE_CONFIG_PAGECACHE) and allocations that overflowed because no space was
             left in the page cache.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.SQLiteStatusCode.ScratchUsed">
             <summary>
             This parameter returns the number of allocations used out of the scratch memory 
             allocator configured using SQLITE_CONFIG_SCRATCH. The value returned is in 
             allocations, not in bytes. Since a single thread may only have one scratch 
             allocation outstanding at time, this parameter also reports the number of threads 
             using scratch memory at the same time.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.SQLiteStatusCode.ScratchOverflow">
             <summary>
             This parameter returns the number of bytes of scratch memory allocation which 
             could not be satisfied by the SQLITE_CONFIG_SCRATCH buffer and where forced 
             to overflow to sqlite3_malloc(). The values returned include overflows because 
             the requested allocation was too larger (that is, because the requested allocation 
             was larger than the "sz" parameter to SQLITE_CONFIG_SCRATCH) and because no 
             scratch buffer slots were available.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.SQLiteStatusCode.MallocSize">
             <summary>
             This parameter records the largest memory allocation request handed to 
             sqlite3_malloc() or sqlite3_realloc() (or their internal equivalents). 
             Only the value returned in the *pHighwater parameter to sqlite3_status() is 
             of interest. The value written into the *pCurrent parameter is undefined.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.SQLiteStatusCode.ParserStack">
             <summary>
             This parameter records the deepest parser stack. It is only meaningful if 
             SQLite is compiled with YYTRACKMAXSTACKDEPTH.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.SQLiteStatusCode.PageCacheSize">
             <summary>
             This parameter records the largest memory allocation request handed to 
             pagecache memory allocator. Only the value returned in the *pHighwater 
             parameter to sqlite3_status() is of interest. The value written into the 
             *pCurrent parameter is undefined.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.SQLiteStatusCode.ScratchSize">
             <summary>
             This parameter records the largest memory allocation request handed to 
             scratch memory allocator. Only the value returned in the *pHighwater 
             parameter to sqlite3_status() is of interest. The value written into 
             the *pCurrent parameter is undefined.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.SQLiteStatusCode.MallocCount">
             <summary>
             This parameter records the number of separate memory allocations 
             currently checked out.
             </summary>
            </member>
        <member name="T:SQLitePCL.pretty.DatabaseConnectionStatusCode">
             <summary>
             These constants designate various run-time status parameters that can be 
             returned by <see cref="M:SQLitePCL.pretty.IDatabaseConnection.Status(SQLitePCL.pretty.DatabaseConnectionStatusCode,System.Int32@,System.Int32@,System.Boolean)" />.
             </summary>
             <seealso href="https://www.sqlite.org/c3ref/c_dbstatus_options.html" />
            </member>
        <member name="F:SQLitePCL.pretty.DatabaseConnectionStatusCode.LookAsideUsed">
             <summary>
             This parameter returns the number of lookaside memory slots currently checked out.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.DatabaseConnectionStatusCode.CacheUsed">
             <summary>
             This parameter returns the approximate number of bytes of heap memory used by 
             all pager caches associated with the database connection. The highwater mark 
             associated with SQLITE_DBSTATUS_CACHE_USED is always 0.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.DatabaseConnectionStatusCode.SchemaUsed">
             <summary>
             This parameter returns the approximate number of bytes of heap memory used 
             to store the schema for all databases associated with the connection - main, 
             temp, and any ATTACH-ed databases. The full amount of memory used by the 
             schemas is reported, even if the schema memory is shared with other database 
             connections due to shared cache mode being enabled. The highwater mark associated 
             with SQLITE_DBSTATUS_SCHEMA_USED is always 0.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.DatabaseConnectionStatusCode.StatementUsed">
             <summary>
             This parameter returns the approximate number of bytes of heap and lookaside 
             memory used by all prepared statements associated with the database connection. 
             The highwater mark associated with SQLITE_DBSTATUS_STMT_USED is always 0.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.DatabaseConnectionStatusCode.LookAsideHit">
             <summary>
             This parameter returns the number malloc attempts that were satisfied using 
             lookaside memory. Only the high-water value is meaningful; the current value is always zero.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.DatabaseConnectionStatusCode.LookAsideMissSize">
             <summary>
             This parameter returns the number malloc attempts that might have been satisfied 
             using lookaside memory but failed due to the amount of memory requested being larger 
             than the lookaside slot size. Only the high-water value is meaningful; the current 
             value is always zero.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.DatabaseConnectionStatusCode.LookAsideMissFull">
             <summary>
             This parameter returns the number malloc attempts that might have been satisfied 
             using lookaside memory but failed due to all lookaside memory already being in use. 
             Only the high-water value is meaningful; the current value is always zero.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.DatabaseConnectionStatusCode.CacheMiss">
             <summary>
             This parameter returns the number of pager cache misses that have occurred. 
             The highwater mark associated with SQLITE_DBSTATUS_CACHE_MISS is always 0.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.DatabaseConnectionStatusCode.CacheWrite">
             <summary>
             This parameter returns the number of dirty cache entries that have been written 
             to disk. Specifically, the number of pages written to the wal file in wal mode 
             databases, or the number of pages written to the database file in rollback mode 
             databases. Any pages written as part of transaction rollback or database recovery 
             operations are not included. If an IO or other error occurs while writing a page 
             to disk, the effect on subsequent SQLITE_DBSTATUS_CACHE_WRITE requests is undefined. 
             The highwater mark associated with SQLITE_DBSTATUS_CACHE_WRITE is always 0.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.DatabaseConnectionStatusCode.DeferedFKS">
             <summary>
             This parameter returns zero for the current value if and only if all foreign key 
             constraints (deferred or immediate) have been resolved. The highwater mark is always 0.
             </summary>
            </member>
        <member name="T:SQLitePCL.pretty.StatementStatusCode">
             <summary>
             Integer codes that name counter values associated with the <see cref="M:SQLitePCL.pretty.IStatement.Status(SQLitePCL.pretty.StatementStatusCode,System.Boolean)" /> interface. 
             </summary>
             <seealso href="https://www.sqlite.org/c3ref/c_stmtstatus_counter.html" />
            </member>
        <member name="F:SQLitePCL.pretty.StatementStatusCode.FullscanStep">
             <summary>
             This is the number of times that SQLite has stepped forward in a table as part 
             of a full table scan. Large numbers for this counter may indicate opportunities 
             for performance improvement through careful use of indices.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.StatementStatusCode.Sort">
             <summary>
             This is the number of sort operations that have occurred. A non-zero value 
             in this counter may indicate an opportunity to improvement performance through 
             careful use of indices.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.StatementStatusCode.AutoIndex">
             <summary>
             This is the number of rows inserted into transient indices that were created 
             automatically in order to help joins run faster. A non-zero value in this 
             counter may indicate an opportunity to improvement performance by adding 
             permanent indices that do not need to be reinitialized each time the statement 
             is run.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.StatementStatusCode.VirtualMachineStep">
             <summary>
             This is the number of virtual machine operations executed by the prepared statement 
             if that number is less than or equal to 2147483647. The number of virtual machine 
             operations can be used as a proxy for the total work done by the prepared statement. 
             If the number of virtual machine operations exceeds 2147483647 then the value returned
             by this statement status code is undefined.
             </summary>
            </member>
        <member name="T:SQLitePCL.pretty.AuthorizerReturnCode">
             <summary>
             Authorizer return codes.
             </summary>
             <seealso href="https://www.sqlite.org/c3ref/c_deny.html" />
            </member>
        <member name="F:SQLitePCL.pretty.AuthorizerReturnCode.Ok">
             <summary>
             Authorize the action.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.AuthorizerReturnCode.Deny">
             <summary>
             Abort the SQL statement with an error.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.AuthorizerReturnCode.Ignore">
             <summary>
             Don't allow access, but don't generate an error.
             </summary>
            </member>
        <member name="T:SQLitePCL.pretty.DatabaseProfileEventArgs">
             <summary>
             Provides data for <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnection" /> <see cref="E:SQLitePCL.pretty.SQLiteDatabaseConnection.Profile" /> events.
             </summary>
            </member>
        <member name="P:SQLitePCL.pretty.DatabaseProfileEventArgs.Statement">
             <summary>
             The SQL statement being profiled.
             </summary>
            </member>
        <member name="P:SQLitePCL.pretty.DatabaseProfileEventArgs.ExecutionTime">
             <summary>
             The execution time of the statement.
             </summary>
            </member>
        <member name="T:SQLitePCL.pretty.DatabaseTraceEventArgs">
             <summary>
             Provides data for <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnection" /> <see cref="E:SQLitePCL.pretty.SQLiteDatabaseConnection.Trace" /> events.
             </summary>
            </member>
        <member name="P:SQLitePCL.pretty.DatabaseTraceEventArgs.Statement">
             <summary>
             The SQL statement text as the statement first begins executing which caused the trace event.
             </summary>
            </member>
        <member name="T:SQLitePCL.pretty.DatabaseUpdateEventArgs">
             <summary>
             Provides data for <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnection" /> <see cref="E:SQLitePCL.pretty.SQLiteDatabaseConnection.Update" /> events.
             </summary>
            </member>
        <member name="P:SQLitePCL.pretty.DatabaseUpdateEventArgs.Action">
             <summary>
             The SQL operation that caused the update event.
             </summary>
            </member>
        <member name="P:SQLitePCL.pretty.DatabaseUpdateEventArgs.Database">
             <summary>
             The database containing the affected row.
             </summary>
            </member>
        <member name="P:SQLitePCL.pretty.DatabaseUpdateEventArgs.Table">
             <summary>
             The table name containing the affected row.
             </summary>
            </member>
        <member name="P:SQLitePCL.pretty.DatabaseUpdateEventArgs.RowId">
             <summary>
             The rowid of the row updated.
             </summary>
            </member>
        <member name="T:SQLitePCL.pretty.DatabaseConnection">
             <summary>
             Extensions methods for <see cref="T:SQLitePCL.pretty.IDatabaseConnection" />
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.DatabaseConnection.WalCheckPoint(SQLitePCL.pretty.IDatabaseConnection,System.String)">
             <summary>
             Checkpoint the database name <paramref name="dbName" />.
             </summary>
             <param name="This">The database connection.</param>
             <param name="dbName">The name of the database.</param>
             <seealso href="https://www.sqlite.org/c3ref/wal_checkpoint.html" />
            </member>
        <member name="M:SQLitePCL.pretty.DatabaseConnection.Execute(SQLitePCL.pretty.IDatabaseConnection,System.String)">
             <summary>
             Compiles and executes a SQL statement.
             </summary>
             <param name="This">The database connection.</param>
             <param name="sql">The SQL statement to compile and execute.</param>
            </member>
        <member name="M:SQLitePCL.pretty.DatabaseConnection.Execute(SQLitePCL.pretty.IDatabaseConnection,System.String,System.Object[])">
             <summary>
             Compiles and executes a SQL statement with the provided bind parameter values.
             </summary>
             <param name="This">The database connection.</param>
             <param name="sql">The SQL statement to compile and execute.</param>
             <param name="values">The bind parameter values.</param>
            </member>
        <member name="M:SQLitePCL.pretty.DatabaseConnection.ExecuteAll(SQLitePCL.pretty.IDatabaseConnection,System.String)">
             <summary>
             Compiles and executes multiple SQL statements.
             </summary>
             <param name="This">The database connection.</param>
             <param name="sql">One or more semicolon delimited SQL statements.</param>
            </member>
        <member name="M:SQLitePCL.pretty.DatabaseConnection.Backup(SQLitePCL.pretty.SQLiteDatabaseConnection,System.String,SQLitePCL.pretty.SQLiteDatabaseConnection,System.String)">
             <summary>
             Performs a full backup from <paramref name="This" /> to <paramref name="destConn" />.
             </summary>
             <param name="This">The database connection.</param>
             <param name="dbName">The name of the database to backup.</param>
             <param name="destConn">The destination database connection.</param>
             <param name="destDbName">The destination database name.</param>
            </member>
        <member name="M:SQLitePCL.pretty.DatabaseConnection.Query(SQLitePCL.pretty.IDatabaseConnection,System.String)">
             <summary>
             Compiles a SQL statement, returning the an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of rows in the result set.
             </summary>
             <param name="This">The database connection.</param>
             <param name="sql">The SQL statement to compile and Query.</param>
             <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of rows in the result set.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.DatabaseConnection.Query(SQLitePCL.pretty.IDatabaseConnection,System.String,System.Object[])">
             <summary>
              Compiles a SQL statement with provided bind parameter values,
              returning the an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of rows in the result set.
             </summary>
             <param name="This">The database connection.</param>
             <param name="sql">The SQL statement to compile and Query.</param>
             <param name="values">The bind parameter values.</param>
             <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of rows in the result set.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.DatabaseConnection.PrepareAll(SQLitePCL.pretty.IDatabaseConnection,System.String)">
             <summary>
             Compiles one or more SQL statements.
             </summary>
             <param name="This">The database connection</param>
             <param name="sql">One or more semicolon delimited SQL statements.</param>
             <returns>A lazily evaluated <see cref="T:System.Collections.Generic.IEnumerable`1" />.
             </returns>
            </member>
        <member name="M:SQLitePCL.pretty.DatabaseConnection.PrepareStatement(SQLitePCL.pretty.IDatabaseConnection,System.String)">
             <summary>
             Compiles a SQL statement.
             </summary>
             <param name="This">The database connection.</param>
             <param name="sql">The SQL statement to compile.</param>
             <returns>The compiled statement.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.DatabaseConnection.GetFileName(SQLitePCL.pretty.SQLiteDatabaseConnection,System.String)">
             <summary>
             Returns the filename associated with the database.
             </summary>
             <param name="This">The database connection.</param>
             <param name="database">The database name. The main database file has the name "main".</param>
             <returns>The attached database's filename.</returns>
             <exception cref="T:System.InvalidOperationException">If the database is not attached, temporary, or in memory.</exception>
            </member>
        <member name="M:SQLitePCL.pretty.DatabaseConnection.OpenBlob(SQLitePCL.pretty.IDatabaseConnection,SQLitePCL.pretty.ColumnInfo,System.Int64,System.Boolean)">
             <summary>
             Opens the blob located by the <see cref="T:SQLitePCL.pretty.ColumnInfo" /> and rowid for incremental I/O as a <see cref="T:System.IO.Stream" />.
             </summary>
             <param name="This">The database connection.</param>
             <param name="columnInfo">The ColumnInfo of the blob value.</param>
             <param name="rowId">The row containing the blob.</param>
             <param name="canWrite">
                 <see langwords="true" /> if the Stream should be open for both read and write operations.
                 <see langwords="false" /> if the Stream should be open oly for read operations.
             </param>
             <returns>A <see cref="T:System.IO.Stream" /> that can be used to synchronously write and read to and from blob.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.DatabaseConnection.Vacuum(SQLitePCL.pretty.IDatabaseConnection)">
             <summary>
             Executes the SQLite VACUUM command
             </summary>
             <param name="This">The database connection.</param>
             <seealso href="https://www.sqlite.org/lang_vacuum.html" />
            </member>
        <member name="M:SQLitePCL.pretty.DatabaseConnection.RunInTransaction(SQLitePCL.pretty.IDatabaseConnection,System.Action{SQLitePCL.pretty.IDatabaseConnection},SQLitePCL.pretty.TransactionMode)">
             <summary>
             Runs the Action <paramref name="action" /> in a transaction and returns the function result.
             If the database is not currently in a transaction, a new transaction is created using
             the provided TransactionMode and committed. Otherwise the transaction is created within
             a savepoint block but not fully committed to the database until the enclosing transaction is committed. 
             </summary>
             <param name="This">The database connection.</param>
             <param name="action">The Action to run in a transaction.</param>
             <param name="mode">
             The transaction mode to use begin a new transaction. Ignored if the transaction is run
             within an existing transaction.
             </param>
             <exception cref="T:System.Exception">The exception that caused the transaction to be aborted and rolled back.</exception>
            </member>
        <member name="M:SQLitePCL.pretty.DatabaseConnection.RunInTransaction(SQLitePCL.pretty.IDatabaseConnection,System.Action{SQLitePCL.pretty.IDatabaseConnection})">
             <summary>
             Runs the Action <paramref name="action" /> in a transaction and returns the function result.
             If the database is not currently in a transaction, a new transaction is created using
             BeginTransaction with TransactionMode.Deferred and committed. Otherwise the transaction is created within
             a savepoint block but not fully committed to the database until the enclosing transaction is committed. 
             </summary>
             <param name="This">The database connection.</param>
             <param name="action">The Action to run in a transaction.</param>
             <exception cref="T:System.Exception">The exception that caused the transaction to be aborted and rolled back.</exception>
            </member>
        <member name="M:SQLitePCL.pretty.DatabaseConnection.RunInTransaction``1(SQLitePCL.pretty.IDatabaseConnection,System.Func{SQLitePCL.pretty.IDatabaseConnection,``0},SQLitePCL.pretty.TransactionMode)">
             <summary>
             Runs the function <paramref name="f" /> in a transaction and returns the function result.
             If the database is not currently in a transaction, a new transaction is created using
             the provided TransactionMode and committed. Otherwise the transaction is created within
             a savepoint block but not fully committed to the database until the enclosing transaction is committed. 
             </summary>
             <returns>The function result.</returns>
             <param name="This">The database connection.</param>
             <param name="f">
             The function to run in a transaction.
             </param>
             <param name="mode">
             The transaction mode to use begin a new transaction. Ignored if the transaction is run
             within an existing transaction.
             </param>
             <typeparam name="T">The result type.</typeparam>
             <exception cref="T:System.Exception">The exception that caused the transaction to be aborted and rolled back.</exception>
            </member>
        <member name="M:SQLitePCL.pretty.DatabaseConnection.RunInTransaction``1(SQLitePCL.pretty.IDatabaseConnection,System.Func{SQLitePCL.pretty.IDatabaseConnection,``0})">
             <summary>
             Runs the function <paramref name="f" /> in a transaction and returns the function result.
             If the database is not currently in a transaction, a new transaction is created using
             BeginTransaction with TransactionMode.Deferred and committed. Otherwise the transaction is created within
             a savepoint block but not fully committed to the database until the enclosing transaction is committed. 
             </summary>
             <returns>The function result.</returns>
             <param name="This">The database connection.</param>
             <param name="f">
             The function to run in a transaction.
             </param>
             <typeparam name="T">The result type.</typeparam>
             <exception cref="T:System.Exception">The exception that caused the transaction to be aborted and rolled back.</exception>
            </member>
        <member name="M:SQLitePCL.pretty.DatabaseConnection.TryRunInTransaction(SQLitePCL.pretty.IDatabaseConnection,System.Action{SQLitePCL.pretty.IDatabaseConnection},SQLitePCL.pretty.TransactionMode)">
             <summary>
             Runs the Action <paramref name="action" /> in a transaction and returns the function result.
             If the database is not currently in a transaction, a new transaction is created using
             the provided TransactionMode and committed. Otherwise the transaction is created within
             a savepoint block but not fully committed to the database until the enclosing transaction is committed. 
             </summary>
             <returns><c>true</c>, if the transaction was committed or released <c>false</c> if it was rolledback.</returns>
             <param name="This">The database connection.</param>
             <param name="action">The Action to run in a transaction.</param>
             <param name="mode">
             The transaction mode to use begin a new transaction. Ignored if the transaction is run
             within an existing transaction.
             </param>
            </member>
        <member name="M:SQLitePCL.pretty.DatabaseConnection.TryRunInTransaction(SQLitePCL.pretty.IDatabaseConnection,System.Action{SQLitePCL.pretty.IDatabaseConnection})">
             <summary>
             Runs the Action <paramref name="action" /> in a transaction and returns the function result.
             If the database is not currently in a transaction, a new transaction is created using
             BeginTransaction with TransactionMode.Deferred and committed. Otherwise the transaction is created within
             a savepoint block but not fully committed to the database until the enclosing transaction is committed. 
             </summary>
             <returns><c>true</c>, if the transaction was committed or released <c>false</c> if it was rolledback.</returns>
             <param name="This">The database connection.</param>
             <param name="action">The Action to run in a transaction.</param>
            </member>
        <member name="M:SQLitePCL.pretty.DatabaseConnection.TryRunInTransaction``1(SQLitePCL.pretty.IDatabaseConnection,System.Func{SQLitePCL.pretty.IDatabaseConnection,``0},SQLitePCL.pretty.TransactionMode,``0@)">
             <summary>
             Runs the function <paramref name="f" /> in a transaction and returns the function result.
             If the database is not currently in a transaction, a new transaction is created using
             the provided TransactionMode and committed. Otherwise the transaction is created within
             a savepoint block but not fully committed to the database until the enclosing transaction is committed. 
             </summary>
             <returns><c>true</c>, if the transaction was committed or released <c>false</c> if it was rolledback.</returns>
             <param name="This">The database connection.</param>
             <param name="f">F.</param>
             <param name="mode">
             The transaction mode to use begin a new transaction. Ignored if the transaction is run
             within an existing transaction.
             </param>
             <param name="result">The function result.</param>
             <typeparam name="T">The result type.</typeparam>
            </member>
        <member name="M:SQLitePCL.pretty.DatabaseConnection.TryRunInTransaction``1(SQLitePCL.pretty.IDatabaseConnection,System.Func{SQLitePCL.pretty.IDatabaseConnection,``0},``0@)">
             <summary>
             Runs the function <paramref name="f" /> in a transaction and returns the function result.
             If the database is not currently in a transaction, a new transaction is created using
             BeginTransaction with TransactionMode.Deferred and committed. Otherwise the transaction is created within
             a savepoint block but not fully committed to the database until the enclosing transaction is committed. 
             </summary>
             <returns><c>true</c>, if the transaction was committed or released <c>false</c> if it was rolledback.</returns>
             <param name="This">The database connection.</param>
             <param name="f">F.</param>
             <param name="result">The function result.</param>
             <typeparam name="T">The result type.</typeparam>
            </member>
        <member name="T:SQLitePCL.pretty.SQLite3">
             <summary>
             Static methods for opening instances of <see cref="T:SQLitePCL.pretty.IDatabaseConnection" />
             and for accessing static SQLite3 properties, and functions.
             </summary>
            </member>
        <member name="P:SQLitePCL.pretty.SQLite3.CompilerOptions">
             <summary>
             The SQLite compiler options that were defined at compile time.
             </summary>
             <seealso href="https://sqlite.org/c3ref/compileoption_get.html" />
            </member>
        <member name="P:SQLitePCL.pretty.SQLite3.EnableSharedCache">
             <summary>
             Enables or disables the sharing of the database cache and schema data structures
             between connections to the same database.
             </summary>
             <seealso href="https://www.sqlite.org/c3ref/enable_shared_cache.html" />
            </member>
        <member name="P:SQLitePCL.pretty.SQLite3.Version">
             <summary>
             The SQLite version.
             </summary>
             <seealso href="https://sqlite.org/c3ref/libversion.html" />
            </member>
        <member name="P:SQLitePCL.pretty.SQLite3.SourceId">
             <summary>
             The SQLite source id.
             </summary>
             <seealso href="https://sqlite.org/c3ref/libversion.html" />
            </member>
        <member name="P:SQLitePCL.pretty.SQLite3.MemoryUsed">
             <summary>
             Returns the number of bytes of memory currently outstanding (malloced but not freed) by SQLite.
             </summary>
             <seealso href="https://sqlite.org/c3ref/memory_highwater.html" />
            </member>
        <member name="P:SQLitePCL.pretty.SQLite3.MemoryHighWater">
             <summary>
             Returns the maximum value of <see cref="P:SQLitePCL.pretty.SQLite3.MemoryUsed" /> since the high-water mark was last reset.
             </summary>
             <seealso href="https://sqlite.org/c3ref/memory_highwater.html" />
            </member>
        <member name="M:SQLitePCL.pretty.SQLite3.CompileOptionUsed(System.String)">
             <summary>
             Indicates whether the specified option was defined at compile time.
             </summary>
             <param name="option">The SQLite compile option. The SQLITE_ prefix may be omitted.</param>
             <returns><see langword="true" /> if the compile option is use, otherwise <see langword="false" /></returns>
             <seealso href="https://sqlite.org/c3ref/compileoption_get.html" />
            </member>
        <member name="M:SQLitePCL.pretty.SQLite3.Open(System.String)">
             <summary>
             Opens a SQLite database.
             </summary>
             <param name="filename">The database filename.</param>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnection" /> instance.</returns>
             <seealso href="https://sqlite.org/c3ref/open.html" />
            </member>
        <member name="M:SQLitePCL.pretty.SQLite3.OpenInMemory">
             <summary>
             Opens an in memory SQLite database. This is useful for testing.
             </summary>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnection" /> instance.</returns>
             <seealso href="https://sqlite.org/c3ref/open.html" />
            </member>
        <member name="M:SQLitePCL.pretty.SQLite3.Open(System.String,SQLitePCL.pretty.ConnectionFlags,System.String)">
             <summary>
             Opens a SQLite database.
             </summary>
             <param name="filename">The database filename.</param>
             <param name="flags"><see cref="T:SQLitePCL.pretty.ConnectionFlags" /> used to defined if the database is readonly,
             read/write and whether a new database file should be created if it does not already exist.</param>
             <param name="vfs">
             The name of the sqlite3_vfs object that defines the operating system interface
             that the new database connection should use. If <see langword="null" />, then
             the default sqlite3_vfs object is used.</param>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnection" /> instance.</returns>
             <seealso href="https://sqlite.org/c3ref/open.html" />
            </member>
        <member name="M:SQLitePCL.pretty.SQLite3.ResetMemoryHighWater">
             <summary>
             Reset the memory high-water mark to the current value of <see cref="P:SQLitePCL.pretty.SQLite3.MemoryUsed" />.
             </summary>
             <seealso href="https://sqlite.org/c3ref/memory_highwater.html" />
            </member>
        <member name="M:SQLitePCL.pretty.SQLite3.IsCompleteStatement(System.String)">
             <summary>
             Determines if the text provided forms a complete SQL statement.
             </summary>
             <param name="sql">The text to evaluate.</param>
             <returns><see langword="true" /> if the text forms a complete SQL
             statement, otherwise <see langword="false" />.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLite3.Status(SQLitePCL.pretty.SQLiteStatusCode,System.Int32@,System.Int32@,System.Boolean)">
             <summary>
             Retrieve runtime status information about the 
             performance of SQLite, and optionally to reset various highwater marks.
             </summary>
             <seealso href="https://www.sqlite.org/c3ref/status.html" />
             <param name="statusCode">The specific parameter to measure.</param>
             <param name="current">The current value of the performance metric.</param>
             <param name="highwater">The highwater value of the performance metric.</param>
             <param name="reset">If <see langword="true" />, then the highest record value is reset.</param>
            </member>
        <member name="T:SQLitePCL.pretty.Statement">
             <summary>
             Extension methods for instances of <see cref="T:SQLitePCL.pretty.IStatement" />.
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.Statement.Bind(SQLitePCL.pretty.IStatement,System.Object[])">
             <summary>
             Binds the position indexed values in <paramref name="values" /> to the
             corresponding bind parameters in <paramref name="This" />.
             </summary>
             <remarks>
             Bind parameters may be <see langword="null" />, any numeric type, or an instance of <see cref="T:System.String" />,
             byte[], or <see cref="T:System.IO.Stream" />.
             </remarks>
             <param name="This">The statement.</param>
             <param name="values">The position indexed values to bind.</param>
             <exception cref="T:System.ArgumentException">
             If the <see cref="T:System.Type" /> of the value is not supported
             -or-
             A non-readable stream is provided as a value.</exception>
            </member>
        <member name="M:SQLitePCL.pretty.Statement.Execute(SQLitePCL.pretty.IStatement,System.Object[])">
             <summary>
             Executes the <see cref="T:SQLitePCL.pretty.IStatement" /> with provided bind parameter values.
             </summary>
             <remarks>Note that this method resets and clears the existing bindings, before
             binding the new values and executing the statement.</remarks>
             <param name="This">The statements.</param>
             <param name="values">The position indexed values to bind.</param>
            </member>
        <member name="M:SQLitePCL.pretty.Statement.Query(SQLitePCL.pretty.IStatement,System.Object[])">
             <summary>
             Queries the database using the provided IStatement and provided bind variables.
             </summary>
             <param name="This">The statements.</param>
             <param name="values">The position indexed values to bind.</param>
             <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of rows in the result set.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.Statement.Query(SQLitePCL.pretty.IStatement)">
             <summary>
             Queries the database using the provided IStatement.
             </summary>
             <param name="This">The statements.</param>
             <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of rows in the result set.</returns>
            </member>
        <member name="T:SQLitePCL.pretty.ResultSet">
             <summary>
             Extensions methods for <see cref="T:SQLitePCL.pretty.IStatement" /> result set rows.
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.ResultSet.SelectScalar(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{SQLitePCL.pretty.IResultSetValue}})">
             <summary>
             Selects the value in the first column of the result set row.
             </summary>
             <returns>An IEnumerable of the scalar values.</returns>
             <param name="This">An enumerable of result set rows.</param>
            </member>
        <member name="M:SQLitePCL.pretty.ResultSet.SelectScalarInt(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{SQLitePCL.pretty.IResultSetValue}})">
             <summary>
             Selects the value in the first column of the result set row as a <see cref="T:System.Int32" />.
             </summary>
             <returns>An IEnumerable of the scalar values.</returns>
             <param name="This">An enumerable of result set rows.</param>
            </member>
        <member name="M:SQLitePCL.pretty.ResultSet.SelectScalarInt64(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{SQLitePCL.pretty.IResultSetValue}})">
             <summary>
             Selects the value in the first column of the result set row as a <see cref="T:System.Int64" />.
             </summary>
             <returns>An IEnumerable of the scalar values.</returns>
             <param name="This">An enumerable of result set rows.</param>
            </member>
        <member name="M:SQLitePCL.pretty.ResultSet.SelectScalarString(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{SQLitePCL.pretty.IResultSetValue}})">
             <summary>
             Selects the value in the first column of the result set row as a <see cref="T:System.String" />.
             </summary>
             <returns>An IEnumerable of the scalar values.</returns>
             <param name="This">An enumerable of result set rows.</param>
            </member>
        <member name="M:SQLitePCL.pretty.ResultSet.SelectScalarBlob(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{SQLitePCL.pretty.IResultSetValue}})">
             <summary>
             Selects the value in the first column of the result set row as a <see cref="T:System.Byte" /> array.
             </summary>
             <returns>An IEnumerable of the scalar values.</returns>
             <param name="This">An enumerable of result set rows.</param>
            </member>
        <member name="M:SQLitePCL.pretty.ResultSet.SelectScalarDouble(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{SQLitePCL.pretty.IResultSetValue}})">
             <summary>
             Selects the value in the first column of the result set row as a <see cref="T:System.Double" />.
             </summary>
             <returns>An IEnumerable of the scalar values.</returns>
             <param name="This">An enumerable of result set rows.</param>
            </member>
        <member name="M:SQLitePCL.pretty.ResultSet.SelectScalarBool(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{SQLitePCL.pretty.IResultSetValue}})">
             <summary>
             Selects the value in the first column of the result set row as a <see cref="T:System.Boolean" />.
             </summary>
             <returns>An IEnumerable of the scalar values.</returns>
             <param name="This">An enumerable of result set rows.</param>
            </member>
        <member name="M:SQLitePCL.pretty.ResultSet.SelectScalarFloat(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{SQLitePCL.pretty.IResultSetValue}})">
             <summary>
             Selects the value in the first column of the result set row as a <see cref="T:System.Single" />.
             </summary>
             <returns>An IEnumerable of the scalar values.</returns>
             <param name="This">An enumerable of result set rows.</param>
            </member>
        <member name="M:SQLitePCL.pretty.ResultSet.SelectScalarTimeSpan(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{SQLitePCL.pretty.IResultSetValue}})">
             <summary>
             Selects the value in the first column of the result set row as a <see cref="T:System.TimeSpan" />.
             </summary>
             <returns>An IEnumerable of the scalar values.</returns>
             <param name="This">An enumerable of result set rows.</param>
            </member>
        <member name="M:SQLitePCL.pretty.ResultSet.SelectScalarDateTime(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{SQLitePCL.pretty.IResultSetValue}})">
             <summary>
             Selects the value in the first column of the result set row as a <see cref="T:System.DateTime" />.
             </summary>
             <returns>An IEnumerable of the scalar values.</returns>
             <param name="This">An enumerable of result set rows.</param>
            </member>
        <member name="M:SQLitePCL.pretty.ResultSet.SelectScalarDateTimeOffset(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{SQLitePCL.pretty.IResultSetValue}})">
             <summary>
             Selects the value in the first column of the result set row as a <see cref="T:System.DateTimeOffset" />.
             </summary>
             <returns>An IEnumerable of the scalar values.</returns>
             <param name="This">An enumerable of result set rows.</param>
            </member>
        <member name="M:SQLitePCL.pretty.ResultSet.SelectScalarUInt32(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{SQLitePCL.pretty.IResultSetValue}})">
             <summary>
             Selects the value in the first column of the result set row as a <see cref="T:System.UInt32" />.
             </summary>
             <returns>An IEnumerable of the scalar values.</returns>
             <param name="This">An enumerable of result set rows.</param>
            </member>
        <member name="M:SQLitePCL.pretty.ResultSet.SelectScalarDecimal(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{SQLitePCL.pretty.IResultSetValue}})">
             <summary>
             Selects the value in the first column of the result set row as a <see cref="T:System.Decimal" />.
             </summary>
             <returns>An IEnumerable of the scalar values.</returns>
             <param name="This">An enumerable of result set rows.</param>
            </member>
        <member name="M:SQLitePCL.pretty.ResultSet.SelectScalarByte(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{SQLitePCL.pretty.IResultSetValue}})">
             <summary>
             Selects the value in the first column of the result set row as a <see cref="T:System.Byte" />.
             </summary>
             <returns>An IEnumerable of the scalar values.</returns>
             <param name="This">An enumerable of result set rows.</param>
            </member>
        <member name="M:SQLitePCL.pretty.ResultSet.SelectScalarUInt16(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{SQLitePCL.pretty.IResultSetValue}})">
             <summary>
             Selects the value in the first column of the result set row as a <see cref="T:System.UInt16" />.
             </summary>
             <returns>An IEnumerable of the scalar values.</returns>
             <param name="This">An enumerable of result set rows.</param>
            </member>
        <member name="M:SQLitePCL.pretty.ResultSet.SelectScalarShort(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{SQLitePCL.pretty.IResultSetValue}})">
             <summary>
             Selects the value in the first column of the result set row as a <see cref="T:System.Int16" />.
             </summary>
             <returns>An IEnumerable of the scalar values.</returns>
             <param name="This">An enumerable of result set rows.</param>
            </member>
        <member name="M:SQLitePCL.pretty.ResultSet.SelectScalarSByte(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{SQLitePCL.pretty.IResultSetValue}})">
             <summary>
             Selects the value in the first column of the result set row as a <see cref="T:System.SByte" />.
             </summary>
             <returns>An IEnumerable of the scalar values.</returns>
             <param name="This">An enumerable of result set rows.</param>
            </member>
        <member name="M:SQLitePCL.pretty.ResultSet.SelectScalarGuid(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{SQLitePCL.pretty.IResultSetValue}})">
             <summary>
             Selects the value in the first column of the result set row as a <see cref="T:System.Guid" />.
             </summary>
             <returns>An IEnumerable of the scalar values.</returns>
             <param name="This">An enumerable of result set rows.</param>
            </member>
        <member name="M:SQLitePCL.pretty.ResultSet.SelectScalarUri(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{SQLitePCL.pretty.IResultSetValue}})">
             <summary>
             Selects the value in the first column of the result set row as a <see cref="T:System.Uri" />.
             </summary>
             <returns>An IEnumerable of the scalar values.</returns>
             <param name="This">An enumerable of result set rows.</param>
            </member>
        <member name="M:SQLitePCL.pretty.ResultSet.Columns(System.Collections.Generic.IReadOnlyList{SQLitePCL.pretty.IResultSetValue})">
             <summary>
             Returns an <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> of columns from a result set row.
             </summary>
             <param name="This">A row in the result set.</param>
             <returns>An <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> of the result set columns.</returns>
            </member>
        <member name="T:SQLitePCL.pretty.TableColumnMetadata">
             <summary>
             Metadata about a specific column of a database table
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.TableColumnMetadata.op_Equality(SQLitePCL.pretty.TableColumnMetadata,SQLitePCL.pretty.TableColumnMetadata)">
             <summary>
             Indicates whether the two TableColumnMetadata instances are equal to each other.
             </summary>
             <param name="x">A TableColumnMetadata instance.</param>
             <param name="y">A TableColumnMetadata instance.</param>
             <returns><see langword="true" /> if the two instances are equal to each other; otherwise,  <see langword="false" />.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.TableColumnMetadata.op_Inequality(SQLitePCL.pretty.TableColumnMetadata,SQLitePCL.pretty.TableColumnMetadata)">
             <summary>
             Indicates whether the two TableColumnMetadata instances are not equal each other.
             </summary>
             <param name="x">A TableColumnMetadata instance.</param>
             <param name="y">A TableColumnMetadata instance.</param>
             <returns><see langword="true" /> if the two instances are equal to each other; otherwise,  <see langword="false" />.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.TableColumnMetadata.op_GreaterThanOrEqual(SQLitePCL.pretty.TableColumnMetadata,SQLitePCL.pretty.TableColumnMetadata)">
             <summary>
             Indicates if the the first TableColumnMetadata is greater than or equal to the second.
             </summary>
             <param name="x">A TableColumnMetadata instance.</param>
             <param name="y">A TableColumnMetadata instance.</param>
             <returns><see langword="true" /> if the the first TableColumnMetadata is greater than or equal to the second; otherwise, <see langword="false" />.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.TableColumnMetadata.op_GreaterThan(SQLitePCL.pretty.TableColumnMetadata,SQLitePCL.pretty.TableColumnMetadata)">
             <summary>
             Indicates if the the first TableColumnMetadata is greater than the second.
             </summary>
             <param name="x">A TableColumnMetadata instance.</param>
             <param name="y">A TableColumnMetadata instance.</param>
             <returns><see langword="true" /> if the the first TableColumnMetadata is greater than the second; otherwise, <see langword="false" />.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.TableColumnMetadata.op_LessThanOrEqual(SQLitePCL.pretty.TableColumnMetadata,SQLitePCL.pretty.TableColumnMetadata)">
             <summary>
             Indicates if the the first TableColumnMetadata is less than or equal to the second.
             </summary>
             <param name="x">A TableColumnMetadata instance.</param>
             <param name="y">A TableColumnMetadata instance.</param>
             <returns><see langword="true" /> if the the first TableColumnMetadata is less than or equal to the second; otherwise, <see langword="false" />.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.TableColumnMetadata.op_LessThan(SQLitePCL.pretty.TableColumnMetadata,SQLitePCL.pretty.TableColumnMetadata)">
             <summary>
             Indicates if the the first TableColumnMetadata is less than the second.
             </summary>
             <param name="x">A TableColumnMetadata instance.</param>
             <param name="y">A TableColumnMetadata instance.</param>
             <returns><see langword="true" /> if the the first TableColumnMetadata is less than the second; otherwise, <see langword="false" />.</returns>
            </member>
        <member name="P:SQLitePCL.pretty.TableColumnMetadata.DeclaredType">
             <summary>
             Returns the declared type of a column or null if no type is declared.
             </summary>
            </member>
        <member name="P:SQLitePCL.pretty.TableColumnMetadata.CollationSequence">
             <summary>
             Name of the default collation sequence.
             </summary>
            </member>
        <member name="P:SQLitePCL.pretty.TableColumnMetadata.HasNotNullConstraint">
             <summary>
             True if column has a NOT NULL constraint.
             </summary>
            </member>
        <member name="P:SQLitePCL.pretty.TableColumnMetadata.IsPrimaryKeyPart">
             <summary>
             True if column is part of the PRIMARY KEY.
             </summary>
            </member>
        <member name="P:SQLitePCL.pretty.TableColumnMetadata.IsAutoIncrement">
             <summary>
             True if column is AUTOINCREMENT.
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.TableColumnMetadata.Equals(SQLitePCL.pretty.TableColumnMetadata)">
             <inheritdoc />
            </member>
        <member name="M:SQLitePCL.pretty.TableColumnMetadata.Equals(System.Object)">
             <inheritdoc />
            </member>
        <member name="M:SQLitePCL.pretty.TableColumnMetadata.GetHashCode">
             <inheritdoc />
            </member>
        <member name="M:SQLitePCL.pretty.TableColumnMetadata.CompareTo(SQLitePCL.pretty.TableColumnMetadata)">
             <inheritdoc />
            </member>
        <member name="M:SQLitePCL.pretty.TableColumnMetadata.CompareTo(System.Object)">
             <inheritdoc />
            </member>
        <member name="M:SQLitePCL.pretty.TableColumnMetadata.ToString">
             <summary>
             Returns a <see cref="T:System.String" /> that represents the current <see cref="T:SQLitePCL.pretty.TableColumnMetadata" />.
             </summary>
             <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:SQLitePCL.pretty.TableColumnMetadata" />.</returns>
            </member>
        <member name="T:SQLitePCL.pretty.TransactionMode">
             <summary>
             Database transaction modes.
             </summary>
             <seealso href="https://www.sqlite.org/lang_transaction.html" />
            </member>
        <member name="F:SQLitePCL.pretty.TransactionMode.Deferred">
             <summary>
             No locks are acquired on the database until the database is first accessed.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.TransactionMode.Immediate">
             <summary>
             RESERVED locks are acquired on all databases as soon as the BEGIN command is 
             executed, without waiting for the database to be used.
             </summary>
            </member>
        <member name="F:SQLitePCL.pretty.TransactionMode.Exclusive">
             <summary>
             EXCLUSIVE locks acquired on all databases. No other database connection except for read_uncommitted connections 
             will be able to read the database and no other connection without exception will be able to write the database 
             until the transaction is complete.
             </summary>
            </member>
        <member name="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder">
             <summary>
             An immutable threadsafe builder that can be used to create <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnection" /> instances.
             </summary>
            </member>
        <member name="P:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.InMemory">
             <summary>
             Returns a <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> that 
             creates in memory <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnection" /> instances.
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.Create(System.String,System.Int32,System.Func{SQLitePCL.pretty.ActionCode,System.String,System.String,System.String,System.String,SQLitePCL.pretty.AuthorizerReturnCode},System.TimeSpan,System.Func{System.Boolean},SQLitePCL.pretty.ConnectionFlags,System.Func{System.Boolean},System.Int32,System.String)">
             <summary>
             Creates <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instances with the provided parameters.
             </summary>
             <param name="fileName">The filename of the database file.</param>
             <param name="autoCheckPointCount">
                 The number of frames in the write-ahead log file that causes any database on
                 database connection D to automatically checkpoint. 
                 See: <see href="https://www.sqlite.org/c3ref/wal_autocheckpoint.html" />
             </param>
             <param name="authorizer">
                 The authorizer callback used by created <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnection" /> instances.
                 See: <see href="https://www.sqlite.org/c3ref/set_authorizer.html" />
             </param>
             <param name="busyTimeout">
                The specified amount of time a connection sleeps when a table is locked. 
                See: <see href="https://www.sqlite.org/c3ref/busy_timeout.html" />
             </param>
             <param name="commitHook">
                 A callback function to be invoked whenever a transaction is committed.
                 See: <see href="https://www.sqlite.org/c3ref/commit_hook.html" />
             </param>
             <param name="connectionFlags">
                 The <see cref="T:SQLitePCL.pretty.ConnectionFlags" /> used when creating <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnection" /> instances.
             </param>
             <param name="progressHandler">
                 A callback function to be invoked periodically during long running calls to the database connection.
                 See: <see href="https://www.sqlite.org/c3ref/progress_handler.html" />
             </param>
             <param name="progressHandlerInterval">
                 The approximate number of virtual machine instructions that are evaluated between 
                 successive invocations of the <paramref name="progressHandler" /> callback.
                 See: <see href="https://www.sqlite.org/c3ref/progress_handler.html" />
             </param>
             <param name="vfs">
             
             </param>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.Build">
             <summary>
             Build a <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnection" /> instance. 
             </summary>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnection" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.With(System.String,System.Nullable{System.Int32},System.Func{SQLitePCL.pretty.ActionCode,System.String,System.String,System.String,System.String,SQLitePCL.pretty.AuthorizerReturnCode},System.Nullable{System.TimeSpan},System.Func{System.Boolean},System.Nullable{SQLitePCL.pretty.ConnectionFlags},System.Func{System.Boolean},System.Nullable{System.Int32},System.String)">
             <summary>
             Creates a new <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> with the provided parameters.
             </summary>
             
             <param name="fileName">The filename of the database file.</param>
             <param name="autoCheckPointCount">
                 The number of frames in the write-ahead log file that causes any database on
                 database connection D to automatically checkpoint. 
                 See: <see href="https://www.sqlite.org/c3ref/wal_autocheckpoint.html" />
             </param>
             <param name="authorizer">
                 The authorizer callback used by created <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnection" /> instances.
                 See: <see href="https://www.sqlite.org/c3ref/set_authorizer.html" />
             </param>
             <param name="busyTimeout">
                The specified amount of time a connection sleeps when a table is locked. 
                See: <see href="https://www.sqlite.org/c3ref/busy_timeout.html" />
             </param>
             <param name="commitHook">
                 A callback function to be invoked whenever a transaction is committed.
                 See: <see href="https://www.sqlite.org/c3ref/commit_hook.html" />
             </param>
             <param name="connectionFlags">
                 The <see cref="T:SQLitePCL.pretty.ConnectionFlags" /> used when creating <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnection" /> instances.
             </param>
             <param name="progressHandler">
                 A callback function to be invoked periodically during long running calls to the database connection.
                 See: <see href="https://www.sqlite.org/c3ref/progress_handler.html" />
             </param>
             <param name="progressHandlerInterval">
                 The approximate number of virtual machine instructions that are evaluated between 
                 successive invocations of the <paramref name="progressHandler" /> callback.
                 See: <see href="https://www.sqlite.org/c3ref/progress_handler.html" />
             </param>
             <param name="vfs">
             
             </param>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.Without(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
             <summary>
             Creates a new <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> without the specified parameter.
             </summary>
             <param name="authorizer">
                 if <see langword="true" /> removes the authorizer callback 
                 from the new <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.
             </param>
             <param name="commitHook">
                 if <see langword="true" /> removes the commitHook callback 
                 from the new <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.
             </param>
             <param name="progressHandler">
                 if <see langword="true" /> removes the progressHandler callback
                 from the new <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.
             </param>
             <param name="vfs">
            
             </param>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithAggregateFunc``1(System.String,``0,System.Func{``0,System.Collections.Generic.IReadOnlyList{SQLitePCL.pretty.ISQLiteValue},``0},System.Func{``0,SQLitePCL.pretty.ISQLiteValue})">
             <summary>
             Add an aggregate function that can accept any number of <see href="ISQLiteValue" /> instances.
             </summary>
             <typeparam name="T">The type of the accumulator value.</typeparam>
             <param name="name">The function name.</param>
             <param name="seed">The initial accumulator value.</param>
             <param name="func">An accumulator function to be invoked on each element.</param>
             <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
             <remarks>Note: The functions <paramref name="func" /> and <paramref name="resultSelector" /> are assumed to be pure and their results may be cached and reused.</remarks>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithAggregateFunc``1(System.String,``0,System.Func{``0,``0},System.Func{``0,SQLitePCL.pretty.ISQLiteValue})">
             <summary>
             Add an aggregate function that accepts no <see href="ISQLiteValue" /> instances.
             </summary>
             <typeparam name="T">The type of the accumulator value.</typeparam>
             <param name="name">The function name.</param>
             <param name="seed">The initial accumulator value.</param>
             <param name="func">An accumulator function to be invoked on each element.</param>
             <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
             <remarks>Note: The functions <paramref name="func" /> and <paramref name="resultSelector" /> are assumed to be pure and their results may be cached and reused.</remarks>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithAggregateFunc``1(System.String,``0,System.Func{``0,SQLitePCL.pretty.ISQLiteValue,``0},System.Func{``0,SQLitePCL.pretty.ISQLiteValue})">
             <summary>
             Add an aggregate function that accepts 1 <see href="ISQLiteValue" /> instance.
             </summary>
             <typeparam name="T">The type of the accumulator value.</typeparam>
             <param name="name">The function name.</param>
             <param name="seed">The initial accumulator value.</param>
             <param name="func">An accumulator function to be invoked on each element.</param>
             <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
             <remarks>Note: The functions <paramref name="func" /> and <paramref name="resultSelector" /> are assumed to be pure and their results may be cached and reused.</remarks>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithAggregateFunc``1(System.String,``0,System.Func{``0,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,``0},System.Func{``0,SQLitePCL.pretty.ISQLiteValue})">
             <summary>
             Add an aggregate function that accepts 2 <see href="ISQLiteValue" /> instances.
             </summary>
             <typeparam name="T">The type of the accumulator value.</typeparam>
             <param name="name">The function name.</param>
             <param name="seed">The initial accumulator value.</param>
             <param name="func">An accumulator function to be invoked on each element.</param>
             <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
             <remarks>Note: The functions <paramref name="func" /> and <paramref name="resultSelector" /> are assumed to be pure and their results may be cached and reused.</remarks>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithAggregateFunc``1(System.String,``0,System.Func{``0,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,``0},System.Func{``0,SQLitePCL.pretty.ISQLiteValue})">
             <summary>
             Add an aggregate function that accepts 3 <see href="ISQLiteValue" /> instances.
             </summary>
             <typeparam name="T">The type of the accumulator value.</typeparam>
             <param name="name">The function name.</param>
             <param name="seed">The initial accumulator value.</param>
             <param name="func">An accumulator function to be invoked on each element.</param>
             <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
             <remarks>Note: The functions <paramref name="func" /> and <paramref name="resultSelector" /> are assumed to be pure and their results may be cached and reused.</remarks>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithAggregateFunc``1(System.String,``0,System.Func{``0,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,``0},System.Func{``0,SQLitePCL.pretty.ISQLiteValue})">
             <summary>
             Add an aggregate function that accepts 4 <see href="ISQLiteValue" /> instances.
             </summary>
             <typeparam name="T">The type of the accumulator value.</typeparam>
             <param name="name">The function name.</param>
             <param name="seed">The initial accumulator value.</param>
             <param name="func">An accumulator function to be invoked on each element.</param>
             <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
             <remarks>Note: The functions <paramref name="func" /> and <paramref name="resultSelector" /> are assumed to be pure and their results may be cached and reused.</remarks>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithAggregateFunc``1(System.String,``0,System.Func{``0,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,``0},System.Func{``0,SQLitePCL.pretty.ISQLiteValue})">
             <summary>
             Add an aggregate function that accepts 5 <see href="ISQLiteValue" /> instances.
             </summary>
             <typeparam name="T">The type of the accumulator value.</typeparam>
             <param name="name">The function name.</param>
             <param name="seed">The initial accumulator value.</param>
             <param name="func">An accumulator function to be invoked on each element.</param>
             <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
             <remarks>Note: The functions <paramref name="func" /> and <paramref name="resultSelector" /> are assumed to be pure and their results may be cached and reused.</remarks>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithAggregateFunc``1(System.String,``0,System.Func{``0,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,``0},System.Func{``0,SQLitePCL.pretty.ISQLiteValue})">
             <summary>
             Add an aggregate function that accepts 6 <see href="ISQLiteValue" /> instances.
             </summary>
             <typeparam name="T">The type of the accumulator value.</typeparam>
             <param name="name">The function name.</param>
             <param name="seed">The initial accumulator value.</param>
             <param name="func">An accumulator function to be invoked on each element.</param>
             <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
             <remarks>Note: The functions <paramref name="func" /> and <paramref name="resultSelector" /> are assumed to be pure and their results may be cached and reused.</remarks>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithAggregateFunc``1(System.String,``0,System.Func{``0,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,``0},System.Func{``0,SQLitePCL.pretty.ISQLiteValue})">
             <summary>
             Add an aggregate function that accepts 7 <see href="ISQLiteValue" /> instances.
             </summary>
             <typeparam name="T">The type of the accumulator value.</typeparam>
             <param name="name">The function name.</param>
             <param name="seed">The initial accumulator value.</param>
             <param name="func">An accumulator function to be invoked on each element.</param>
             <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
             <remarks>Note: The functions <paramref name="func" /> and <paramref name="resultSelector" /> are assumed to be pure and their results may be cached and reused.</remarks>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithAggregateFunc``1(System.String,``0,System.Func{``0,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,``0},System.Func{``0,SQLitePCL.pretty.ISQLiteValue})">
             <summary>
             Add an aggregate function that accepts 8 <see href="ISQLiteValue" /> instances.
             </summary>
             <typeparam name="T">The type of the accumulator value.</typeparam>
             <param name="name">The function name.</param>
             <param name="seed">The initial accumulator value.</param>
             <param name="func">An accumulator function to be invoked on each element.</param>
             <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
             <remarks>Note: The functions <paramref name="func" /> and <paramref name="resultSelector" /> are assumed to be pure and their results may be cached and reused.</remarks>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithCollation(System.String,System.Comparison{System.String})">
             <summary>
             Returns a new <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> with the provided collation function.
             </summary>
             <param name="name">The collation name.</param>
             <param name="comparison">The collation function.</param>
             <seealso href="https://www.sqlite.org/c3ref/create_collation.html" />
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithScalarFunc(System.String,System.Int32,System.Func{System.Collections.Generic.IReadOnlyList{SQLitePCL.pretty.ISQLiteValue},SQLitePCL.pretty.ISQLiteValue})">
             <summary>
             Adds a scalar function.
             </summary>
             <seealso href="https://sqlite.org/c3ref/create_function.html" />
             <param name="name">The function name.</param>
             <param name="nArg">The number of arguments the function takes or -1 if it may take any number of arguments.</param>
             <param name="reduce">A reduction function.</param>
             <remarks>Note: The function <paramref name="reduce" /> is assumed to be pure and their results may be cached and reused.</remarks>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithScalarFunc(System.String,System.Func{System.Collections.Generic.IReadOnlyList{SQLitePCL.pretty.ISQLiteValue},SQLitePCL.pretty.ISQLiteValue})">
             <summary>
             Adds a scalar function that can accept any number of <see href="ISQLiteValue" /> instances.
             </summary>
             <param name="name">The function name.</param>
             <param name="reduce">A reduction function.</param>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithScalarFunc(System.String,System.Func{SQLitePCL.pretty.ISQLiteValue})">
             <summary>
             Adds a scalar function that accepts 0 <see href="ISQLiteValue" /> instances.
             </summary>
             <param name="name">The function name.</param>
             <param name="reduce">A reduction function.</param>
             <remarks>Note: The function <paramref name="reduce" /> is assumed to be pure and their results may be cached and reused.</remarks>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithScalarFunc(System.String,System.Func{SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue})">
             <summary>
             Adds a scalar function that accepts 1 <see href="ISQLiteValue" /> instances.
             </summary>
             <param name="name">The function name.</param>
             <param name="reduce">A reduction function.</param>
             <remarks>Note: The function <paramref name="reduce" /> is assumed to be pure and their results may be cached and reused.</remarks>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithScalarFunc(System.String,System.Func{SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue})">
             <summary>
             Adds a scalar function that accepts 2 <see href="ISQLiteValue" /> instances.
             </summary>
             <param name="name">The function name.</param>
             <param name="reduce">A reduction function.</param>
             <remarks>Note: The function <paramref name="reduce" /> is assumed to be pure and their results may be cached and reused.</remarks>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithScalarFunc(System.String,System.Func{SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue})">
             <summary>
             Adds a scalar function that accepts 3 <see href="ISQLiteValue" /> instances.
             </summary>
             <param name="name">The function name.</param>
             <param name="reduce">A reduction function.</param>
             <remarks>Note: The function <paramref name="reduce" /> is assumed to be pure and their results may be cached and reused.</remarks>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithScalarFunc(System.String,System.Func{SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue})">
             <summary>
             Adds a scalar function that accepts 4 <see href="ISQLiteValue" /> instances.
             </summary>
             <param name="name">The function name.</param>
             <param name="reduce">A reduction function.</param>
             <remarks>Note: The function <paramref name="reduce" /> is assumed to be pure and their results may be cached and reused.</remarks>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithScalarFunc(System.String,System.Func{SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue})">
             <summary>
             Adds a scalar function that accepts 5 <see href="ISQLiteValue" /> instances.
             </summary>
             <param name="name">The function name.</param>
             <param name="reduce">A reduction function.</param>
             <remarks>Note: The function <paramref name="reduce" /> is assumed to be pure and their results may be cached and reused.</remarks>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithScalarFunc(System.String,System.Func{SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue})">
             <summary>
             Adds a scalar function that accepts 6 <see href="ISQLiteValue" /> instances.
             </summary>
             <param name="name">The function name.</param>
             <param name="reduce">A reduction function.</param>
             <remarks>Note: The function <paramref name="reduce" /> is assumed to be pure and their results may be cached and reused.</remarks>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithScalarFunc(System.String,System.Func{SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue})">
             <summary>
             Adds a scalar function that accepts 7 <see href="ISQLiteValue" /> instances.
             </summary>
             <param name="name">The function name.</param>
             <param name="reduce">A reduction function.</param>
             <remarks>Note: The function <paramref name="reduce" /> is assumed to be pure and their results may be cached and reused.</remarks>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithScalarFunc(System.String,System.Func{SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue,SQLitePCL.pretty.ISQLiteValue})">
             <summary>
             Adds a scalar function that accepts 8 <see href="ISQLiteValue" /> instances.
             </summary>
             <param name="name">The function name.</param>
             <param name="reduce">A reduction function.</param>
             <remarks>Note: The function <paramref name="reduce" /> is assumed to be pure and their results may be cached and reused.</remarks>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithoutCollation(System.String)">
             <summary>
             Returns a <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> without the specified collation function.
             </summary>
             <param name="name">The name of the collation function.</param>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithoutFunc(System.String,System.Int32)">
             <summary>
             Returns a <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> without the specified function.
             </summary>
             <param name="name">The name of the function.</param>
             <param name="nArg">The arity of the function.</param>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithoutCollations">
             <summary>
             Returns a <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> without any collation functions.
             </summary>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder.WithoutFuncs">
             <summary>
             Returns a <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> without any aggregate or scalar functions.
             </summary>
             <returns>A <see cref="T:SQLitePCL.pretty.SQLiteDatabaseConnectionBuilder" /> instance.</returns>
            </member>
        <member name="T:SQLitePCL.pretty.SQLiteDatabaseConnection">
             <summary>
             An implementation of IDatabaseConnection that wraps a raw SQLite database connection.
             </summary>
            </member>
        <member name="E:SQLitePCL.pretty.SQLiteDatabaseConnection.Rollback">
             <summary>
             Occurs whenever a transaction is rolled back on the database connection.
             </summary>
             <seealso href="https://sqlite.org/c3ref/commit_hook.html" />
            </member>
        <member name="E:SQLitePCL.pretty.SQLiteDatabaseConnection.Profile">
             <summary>
             Profiling event that occurs when a <see cref="T:SQLitePCL.pretty.IStatement" /> finishes.
             </summary>
             <seealso href="https://sqlite.org/c3ref/profile.html" />
            </member>
        <member name="E:SQLitePCL.pretty.SQLiteDatabaseConnection.Trace">
             <summary>
             Tracing event that occurs at various times when <see cref="T:SQLitePCL.pretty.IStatement" />is running.
             </summary>
             <seealso href="https://sqlite.org/c3ref/profile.html" />
            </member>
        <member name="E:SQLitePCL.pretty.SQLiteDatabaseConnection.Update">
             <summary>
             Occurs whenever a row is updated, inserted or deleted in a rowid table.
             </summary>
             <seealso href="https://sqlite.org/c3ref/update_hook.html" />
            </member>
        <member name="P:SQLitePCL.pretty.SQLiteDatabaseConnection.IsAutoCommit">
             <inheritdoc />
            </member>
        <member name="P:SQLitePCL.pretty.SQLiteDatabaseConnection.IsReadOnly">
             <inheritdoc />
            </member>
        <member name="P:SQLitePCL.pretty.SQLiteDatabaseConnection.Changes">
             <inheritdoc />
            </member>
        <member name="P:SQLitePCL.pretty.SQLiteDatabaseConnection.TotalChanges">
             <inheritdoc />
            </member>
        <member name="P:SQLitePCL.pretty.SQLiteDatabaseConnection.LastInsertedRowId">
             <inheritdoc />
            </member>
        <member name="P:SQLitePCL.pretty.SQLiteDatabaseConnection.Statements">
             <summary>
             An enumeration of the connection's currently opened statements in the order they were prepared.
             </summary>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnection.BackupInit(System.String,SQLitePCL.pretty.SQLiteDatabaseConnection,System.String)">
             <summary>
             Initializes a backup of database to a destination database.
             </summary>
             <seealso href="https://sqlite.org/c3ref/backup_finish.html" />
             <param name="dbName">The name of the database to backup.</param>
             <param name="destConn">The destination database connection.</param>
             <param name="destDbName">The destination database name</param>
             <returns>An <see cref="T:SQLitePCL.pretty.IDatabaseBackup" /> instance that can be used to
             perform the backup operation.</returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnection.GetTableColumnMetadata(System.String,System.String,System.String)">
             <inheritdoc />
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnection.Interrupt">
             <summary>
              Causes any pending database operation to abort and return at its earliest opportunity.
             </summary>
             <seealso href="https://www.sqlite.org/c3ref/interrupt.html" />
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnection.IsDatabaseReadOnly(System.String)">
             <inheritdoc />
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnection.TryGetFileName(System.String,System.String@)">
             <summary>
             Returns the filename associated with the database if available.
             </summary>
             <seealso href="https://sqlite.org/c3ref/db_filename.html" />
             <param name="database">The database name. The main database file has the name "main".</param>
             <param name="filename">When this method returns, contains the filename if there is an
             attached database that is not temporary or in memory. Otherwise null.
             This parameter is passed uninitialized.</param>
             <returns><see langword="true" /> if the database has a filename, otherwise <see langword="false" />.
             </returns>
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnection.OpenBlob(System.String,System.String,System.String,System.Int64,System.Boolean)">
             <inheritdoc />
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnection.PrepareStatement(System.String,System.String@)">
             <inheritdoc />
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnection.Status(SQLitePCL.pretty.DatabaseConnectionStatusCode,System.Int32@,System.Int32@,System.Boolean)">
             <inheritdoc />
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnection.WalCheckPoint(System.String,SQLitePCL.pretty.WalCheckPointMode,System.Int32@,System.Int32@)">
             <inheritdoc />
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnection.Dispose">
             <inheritdoc />
            </member>
        <member name="M:SQLitePCL.pretty.SQLiteDatabaseConnection.Finalize">
             <inheritdoc />
            </member>
    </members>
</doc>
